"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[1819],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=o,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1e9,last_update:{date:new Date("2025-09-03T13:32:58.000Z")},tags:["python"]},i="with statement",l={unversionedId:"language/python/with-statement",id:"language/python/with-statement",title:"with statement",description:"with statement allow u to automatically execute setup / teardown code block of a callable(class or function).",source:"@site/docs/language/python/with-statement.mdx",sourceDirName:"language/python",slug:"/language/python/with-statement",permalink:"/recaller/docs/language/python/with-statement",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/with-statement.mdx",tags:[{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1756906378,formattedLastUpdatedAt:"Sep 3, 2025",sidebarPosition:1e9,frontMatter:{sidebar_position:1e9,last_update:{date:"2025-09-03T13:32:58.000Z"},tags:["python"]},sidebar:"default",previous:{title:"Virtual environment",permalink:"/recaller/docs/language/python/virtual-environment"},next:{title:"Control Flow",permalink:"/recaller/docs/language/python/control-flow/"}},p={},s=[{value:"Class-based context manager",id:"class-based-context-manager",level:2},{value:"Function-based context manager",id:"function-based-context-manager",level:2},{value:"Async context manager",id:"async-context-manager",level:2},{value:"Class",id:"class",level:3},{value:"Function",id:"function",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},m=c("Admonition"),d=c("Color"),u={toc:s};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"with-statement"},(0,o.kt)("inlineCode",{parentName:"h1"},"with")," statement"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"with")," statement allow u to automatically execute setup / teardown code block of a callable(class or function)."),(0,o.kt)("p",null,"In order for a callable to have setup / teardown code block, it then need to support ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/datamodel.html#context-managers"},"context manager"),"."),(0,o.kt)("p",null,"In the other words, it need to have ",(0,o.kt)("inlineCode",{parentName:"p"},"__enter__")," method (for setup code block) and ",(0,o.kt)("inlineCode",{parentName:"p"},"__exit__")," method (for teardown code block)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with foo_callable() as return_value_from__enter__method:\n  print('foo')\n\nprint('bar')\n")),(0,o.kt)("p",null,"Excueting ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," statement on context manager callable will allow Python to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"execute a callable object, ",(0,o.kt)("inlineCode",{parentName:"li"},"foo_callable")),(0,o.kt)("li",{parentName:"ol"},"execute ",(0,o.kt)("inlineCode",{parentName:"li"},"__enter__")," method",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"if ",(0,o.kt)("inlineCode",{parentName:"li"},"with")," statement has target, ",(0,o.kt)("inlineCode",{parentName:"li"},"as return_value_from__enter__method"),". it will be assigned with value return from ",(0,o.kt)("inlineCode",{parentName:"li"},"__enter__")," method."))),(0,o.kt)("li",{parentName:"ol"},"execute code inside ",(0,o.kt)("inlineCode",{parentName:"li"},"with")," enclosing"),(0,o.kt)("li",{parentName:"ol"},"execute ",(0,o.kt)("inlineCode",{parentName:"li"},"__end__")," method at the end of ",(0,o.kt)("inlineCode",{parentName:"li"},"with")," enclosing.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"__end__")," method is executed whether or not exceptions occur inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"with")," enclosing "),(0,o.kt)("li",{parentName:"ol"},"if an exception occur and is not handled by ",(0,o.kt)("inlineCode",{parentName:"li"},"__end__")," method, exception will be propagated out to upper enclosing.")))),(0,o.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,o.kt)("p",null,"You can pass multiple callable to ",(0,o.kt)("inlineCode",{parentName:"p"},"with"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with (\n    A() as a,\n    B() as b,\n):\n  pass\n")),(0,o.kt)("p",null,"equivalent to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with A() as a:\n    with B() as b:\n        pass\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null," `with` statement is sugar syntax for `try...finally` "),(0,o.kt)("p",null,"Opening file with ",(0,o.kt)("inlineCode",{parentName:"p"},"with"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'with open("hello.txt", "w") as file:\n  file.write("Hello, World!")\n')),(0,o.kt)("p",null,"with ",(0,o.kt)("inlineCode",{parentName:"p"},"try...finally"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'file = open("hello.txt", "w")\n\ntry:\n    file.write("Hello, World!")\nfinally:\n    file.close()\n'))),(0,o.kt)(m,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"More on ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/datamodel.html#context-managers"},"context manager"))),(0,o.kt)(m,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"More on ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/compound_stmts.html#with"},(0,o.kt)("inlineCode",{parentName:"a"},"with")," statement"))),(0,o.kt)("h2",{id:"class-based-context-manager"},"Class-based context manager"),(0,o.kt)("p",null,"You can create a class that support context manager."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'class Foo:\n  def __init__(self, arg1):\n    self._arg1 = arg1\n    print("Init with", arg1)\n\n  def __enter__(self):\n    print("Entering the context")\n    return "Hello, World!"\n\n  def __exit__(self, exception_type, exception_value, exception_traceback):\n    print("Leaving the context")\n    print(f"{exception_type  = }")\n    print(f"{exception_value = }")\n    print(f"{exception_traceback = }")\n\n\n# highlight-start\nwith Foo(\'bar\') as hello:\n     print(hello)\n# highlight-end\n\n# Init with bar\n# Entering the context\n# Hello, World!\n# Leaving the context\n# exception_type  = None\n# exception_value = None\n# exception_traceback = None\n')),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"An exception raised inside ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," enclosing ",(0,o.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," end its enclosing "),". ","[",(0,o.kt)("inlineCode",{parentName:"p"},"with")," end when exception occur]"),(0,o.kt)("p",null,"The exception then it will be passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"__exit__")," method.")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"__exit__")," method return ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", the expression is suppressed. Otherwise an exception will be propagated to upper enclosing."),(0,o.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,o.kt)("p",null,"This is useful when u want a ",(0,o.kt)("inlineCode",{parentName:"p"},"callable")," to automatically handle a certain exception"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def __exit__(self, exception_type, exception_value, exception_traceback):\n  if isinstance(exception_value, IndexError):\n    # handle error\n    return True\n")))),(0,o.kt)("h2",{id:"function-based-context-manager"},"Function-based context manager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"from contextlib import contextmanager\n\n# highlight-next-line\n@contextmanager\ndef foo(arg1):\n  print('executing inside generator arg1 =', arg1)\n  try:\n    # highlight-next-line\n    yield \"Hello, World!\"\n    print('after `with` enclosing end if exception does not occur')\n  except BaseException as e:\n    print('generator handle exception')\n  finally:\n    print(\"generator finally\")\n\n\nwith foo('bar') as hello:\n  print('executing inside with statement hello =', hello)\n  raise Exception('something')\n  print('not executed after exception raised')\n\nprint('end of program')\n\n# output:\n# executing inside generator arg1 = bar\n# executing inside with statement hello = Hello, World!\n# generator handle exception\n# generator finally\n# end of program\n")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"A decorated function must be a generator function. It must ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," ",(0,o.kt)(d,{color:"var(--primary-font-color)",mdxType:"Color"}," exactly one value"),".")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"At the point where the generator yields, the code inside ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," statement is executed.")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"An exception raised inside ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," enclosing ",(0,o.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," end its enclosing "),". ","[",(0,o.kt)("inlineCode",{parentName:"p"},"with")," end when exception occur]"),(0,o.kt)("p",null,"The exception then reraised inside the generator at the point where ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," occur"),(0,o.kt)("p",null,"If generator then does not reraised exception it is passed to, the exception is suppressed.")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," end with no exception, the code after ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," is resume, ","[including ",(0,o.kt)("inlineCode",{parentName:"p"},"finally")," statement, of course]")),(0,o.kt)("h2",{id:"async-context-manager"},"Async context manager"),(0,o.kt)("p",null,"is a context manager that its setup / teardown function is an async function"),(0,o.kt)("p",null,"It use with ",(0,o.kt)("inlineCode",{parentName:"p"},"async with")," statement."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"async with foo() as bar:\n  pass\n")),(0,o.kt)("h3",{id:"class"},"Class"),(0,o.kt)("p",null,"use ",(0,o.kt)("inlineCode",{parentName:"p"},"__aenter__")," for setup method"),(0,o.kt)("p",null,"use ",(0,o.kt)("inlineCode",{parentName:"p"},"__aexit__")," for teardown method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"class AsyncContextManager:\n    async def __aenter__(self):\n        await log('entering context')\n\n    async def __aexit__(self, exc_type, exc, tb):\n        await log('exiting context')\n")),(0,o.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,o.kt)("p",null,"You can define both sync and async setup / teardown methods to support both ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"async with"))),(0,o.kt)("h3",{id:"function"},"Function"),(0,o.kt)("p",null,"use ",(0,o.kt)("inlineCode",{parentName:"p"},"asynccontextmanager")," decorator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"from contextlib import asynccontextmanager\n\n@asynccontextmanager\nasync def get_connection():\n    conn = await acquire_db_connection()\n    try:\n        yield conn\n    finally:\n        await release_db_connection(conn)\n\nasync def get_all_users():\n    async with get_connection() as conn:\n        return conn.query('SELECT ...')\n")),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"sources"},"Sources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://realpython.com/python-with-statement"},"https://realpython.com/python-with-statement")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/reference/compound_stmts.html#with"},"https://docs.python.org/3/reference/compound_stmts.html#with")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/reference/datamodel.html#context-managers"},"https://docs.python.org/3/reference/datamodel.html#context-managers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/reference/datamodel.html#asynchronous-context-managers"},"https://docs.python.org/3/reference/datamodel.html#asynchronous-context-managers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/stdtypes.html#typecontextmanager"},"https://docs.python.org/3/library/stdtypes.html#typecontextmanager")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager"},"https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/contextlib.html#contextlib.asynccontextmanager"},"https://docs.python.org/3/library/contextlib.html#contextlib.asynccontextmanager"))))}h.isMDXComponent=!0}}]);