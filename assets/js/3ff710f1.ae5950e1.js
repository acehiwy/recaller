"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[9508],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),y=p(n),m=o,d=y["".concat(s,".").concat(m)]||y[m]||c[m]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2812:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1e4},i="Type hint",l={unversionedId:"language/python/type-hint/index",id:"language/python/type-hint/index",title:"Type hint",description:"Python support optional typing system.",source:"@site/docs/language/python/type-hint/index.mdx",sourceDirName:"language/python/type-hint",slug:"/language/python/type-hint/",permalink:"/recaller/docs/language/python/type-hint/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/type-hint/index.mdx",tags:[],version:"current",lastUpdatedAt:1756722818,formattedLastUpdatedAt:"Sep 1, 2025",sidebarPosition:1e4,frontMatter:{sidebar_position:1e4},sidebar:"default",previous:{title:"String",permalink:"/recaller/docs/language/python/string"},next:{title:"Virtual environment",permalink:"/recaller/docs/language/python/virtual-environment"}},s={},p=[{value:"Simple type",id:"simple-type",level:2},{value:"Object type",id:"object-type",level:2},{value:"Union type (or)",id:"union-type-or",level:2},{value:"None type",id:"none-type",level:2},{value:"Possibly None",id:"possibly-none",level:3},{value:"Class type",id:"class-type",level:2}],u=(c="Admonition",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const y={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"type-hint"},"Type hint"),(0,o.kt)("p",null,"Python support optional typing system. "),(0,o.kt)("p",null,"Python does not validate type written on the source code. "),(0,o.kt)("p",null,"It is depend on other tool themself whether they would make used of type wrttien in the Python file. eg. IDE can suggest string method if the variable's type is declared as string."),(0,o.kt)("h2",{id:"simple-type"},"Simple type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def foo(a: str, b: int, c: float, d: bool, e: bytes) -> int:\n  pass\n")),(0,o.kt)("h2",{id:"object-type"},"Object type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'my_list: list[str] = []\n\nmy_tuple: tuple[int, str, bool] = ()\n\nmy_set: set[bytes] = {}\n\nmy_dict: dict[str, int] = {"foo": 123}\n')),(0,o.kt)("h2",{id:"union-type-or"},"Union type (or)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"either_int_or_str: int | str\n")),(0,o.kt)("h2",{id:"none-type"},"None type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"value_is_none: None = None\n")),(0,o.kt)("h3",{id:"possibly-none"},"Possibly None"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"either_str_or_none: str | None\n")),(0,o.kt)("h2",{id:"class-type"},"Class type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"class Person:\n    def __init__(self, name: str):\n        self.name = name\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n")),(0,o.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Person")," type is an instance of a class, not class")))}m.isMDXComponent=!0}}]);