"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[7612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,l(l({ref:t},c),{},{components:n})):o.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={last_update:{date:new Date("1998-09-14T15:29:00.000Z")},tags:["python"]},l="Loop",i={unversionedId:"language/python/loop",id:"language/python/loop",title:"Loop",description:"output",source:"@site/docs/language/python/3_loop.mdx",sourceDirName:"language/python",slug:"/language/python/loop",permalink:"/recaller/docs/language/python/loop",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/3_loop.mdx",tags:[{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:905786940,formattedLastUpdatedAt:"Sep 14, 1998",sidebarPosition:3,frontMatter:{last_update:{date:"1998-09-14T15:29:00.000Z"},tags:["python"]},sidebar:"default",previous:{title:"match statement",permalink:"/recaller/docs/language/python/control-flow/match-statement"},next:{title:"List",permalink:"/recaller/docs/language/python/list"}},p={},s=[{value:"Loop on a list",id:"loop-on-a-list",level:2},{value:"Loop on dict",id:"loop-on-dict",level:2},{value:"<code>break</code> and <code>continue</code>",id:"break-and-continue",level:3},{value:"<code>else</code> on Loop",id:"else-on-loop",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=c("Admonition"),d=c("Color"),m={toc:s};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loop"},"Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"for i in range(5): # or range(2,5) -> 2,3,4\n    print(i)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null," output  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"# 0\n# 1\n# 2\n# 3\n# 4\n"))),(0,r.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"range()")," function return ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/glossary.html#term-iterable"},"iterable"))),(0,r.kt)("h2",{id:"loop-on-a-list"},"Loop on a list"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"words = ['cat', 'window', 'defenestrate']\nfor w in words:\n    print(w, len(w))\n")),(0,r.kt)("p",null,"get list's index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"words = ['cat', 'window', 'defenestrate']\nfor index, value in enumerate(words):\n    print(index, value)\n")),(0,r.kt)("h2",{id:"loop-on-dict"},"Loop on dict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"users = {'Hans': 'active', '\xc9l\xe9onore': 'inactive', '\u666f\u592a\u90ce': 'active'}\n\nfor key, value in users.copy().items():\n    # do something\n")),(0,r.kt)(u,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"Modifying and iterating same collection should be avoided. You can work with a copy of them. eg. ",(0,r.kt)("inlineCode",{parentName:"p"},"<collection>.copy()")," ")),(0,r.kt)("h3",{id:"break-and-continue"},(0,r.kt)("inlineCode",{parentName:"h3"},"break")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"continue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"for ... :\n  # do something\n  # highlight-next-line\n  continue\n  for ... :\n    # do something\n    # highlight-next-line\n    break\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"break")," statement the ",(0,r.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," innermost enclosing ")," ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"else-on-loop"},(0,r.kt)("inlineCode",{parentName:"h3"},"else")," on Loop"),(0,r.kt)("p",null,"If the loop ",(0,r.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," finishes without ")," executing the ",(0,r.kt)("inlineCode",{parentName:"p"},"break"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," clause executes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'for ... :\n  # do something\nelse:\n  print("print if no break")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"i = 0\nwhile i <= 3:\n  print(i)\n  i = i +1 \n  break\nelse:\n  print('print if no break')\n\n# output\n# 0\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/controlflow.html#for-statements"},"https://docs.python.org/3/tutorial/controlflow.html#for-statements"))))}h.isMDXComponent=!0}}]);