"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[1941],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},l="Set",i={unversionedId:"language/python/set",id:"language/python/set",title:"Set",description:"A set is an  unordered  collection with no duplicate elements.",source:"@site/docs/language/python/set.mdx",sourceDirName:"language/python",slug:"/language/python/set",permalink:"/recaller/docs/language/python/set",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/set.mdx",tags:[],version:"current",frontMatter:{},sidebar:"default",previous:{title:"List",permalink:"/recaller/docs/language/python/list"},next:{title:"Tuples",permalink:"/recaller/docs/language/python/tuple"}},s={},c=[{value:"union, intersection, difference, and symmetric difference",id:"union-intersection-difference-and-symmetric-difference",level:2},{value:"Set comprehensions",id:"set-comprehensions",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},p=u("Color"),d=u("Admonition"),m={toc:c};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"set"},"Set"),(0,o.kt)("p",null,"A set is an ",(0,o.kt)(p,{color:"var(--secondary-font-color)",mdxType:"Color"}," unordered ")," collection with no duplicate elements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\n\nempty_set = set() \n")),(0,o.kt)("h2",{id:"union-intersection-difference-and-symmetric-difference"},"union, intersection, difference, and symmetric difference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"a = set('abcdr')\nb = set('acmlz')\n\na - b # left join. letters in a but not in b\n# {'r', 'd', 'b'}\n\na | b # full join. letters in a or b or both\n# {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\n\na & b # inner join. letters in both a and b\n# {'a', 'c'}\n\na ^ b # outer join. letters in a or b but not both\n# {'r', 'd', 'b', 'm', 'z', 'l'}\n")),(0,o.kt)("h2",{id:"set-comprehensions"},"Set comprehensions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"a = {x for x in 'abracadabra' if x not in 'abc'}\n# {'r', 'd'}\n")),(0,o.kt)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,o.kt)(d,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"More info on set ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset"},"here"))),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"sources"},"Sources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/datastructures.html#sets"},"https://docs.python.org/3/tutorial/datastructures.html#sets"))))}f.isMDXComponent=!0}}]);