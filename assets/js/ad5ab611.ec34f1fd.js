"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[6241],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(a),c=r,f=d["".concat(p,".").concat(c)]||d[c]||u[c]||i;return a?n.createElement(f,o(o({ref:t},m),{},{components:a})):n.createElement(f,o({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1995:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1e9,last_update:{date:new Date("2025-09-01T10:15:18.000Z")},tags:["FastAPI","python"]},o="Path Parameters",l={unversionedId:"framework/fastAPI/path-parameter",id:"framework/fastAPI/path-parameter",title:"Path Parameters",description:"Path parameters name, itemid, defined in decorator must be align with argument name, itemid, defined on function.",source:"@site/docs/framework/fastAPI/path-parameter.mdx",sourceDirName:"framework/fastAPI",slug:"/framework/fastAPI/path-parameter",permalink:"/recaller/docs/framework/fastAPI/path-parameter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/framework/fastAPI/path-parameter.mdx",tags:[{label:"FastAPI",permalink:"/recaller/docs/tags/fast-api"},{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1756721718,formattedLastUpdatedAt:"Sep 1, 2025",sidebarPosition:1e9,frontMatter:{sidebar_position:1e9,last_update:{date:"2025-09-01T10:15:18.000Z"},tags:["FastAPI","python"]},sidebar:"default",previous:{title:"Fast API",permalink:"/recaller/docs/framework/fastAPI/"},next:{title:"Assignment Expression",permalink:"/recaller/docs/language/python/assignment-expression"}},p={},s=[{value:'<Color color="var(--secondary-font-color)"> Define argument type </Color>',id:"-define-argument-type-",level:2},{value:"Path operation defining order",id:"path-operation-defining-order",level:2},{value:"Define set of valid values for path parameters",id:"define-set-of-valid-values-for-path-parameters",level:2},{value:"Path parameters that contain file path",id:"path-parameters-that-contain-file-path",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=m("Admonition"),d=m("Color"),c={toc:s};function f(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"path-parameters"},"Path Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'@app.get("/items/{item_id}")\nasync def read_item(item_id: int):\n    return {"item_id": item_id}\n')),(0,r.kt)(u,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"Path parameters name, ",(0,r.kt)("inlineCode",{parentName:"p"},"item_id"),", defined in decorator must be align with argument name, ",(0,r.kt)("inlineCode",{parentName:"p"},"item_id"),", defined on function."),(0,r.kt)("p",null,"Otherwise FastAPI would interpret function argument as query / search parameters")),(0,r.kt)("h2",{id:"-define-argument-type-"},(0,r.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," Define argument type ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'@app.get("/items/{item_id}")\n#  highlight-next-line\nasync def read_item(item_id: int):\n    # item_id here is parse from string to int by FastAPI\n    return {"item_id": item_id}\n')),(0,r.kt)("p",null,"Based on argument type, FastAPI will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"validate request value"),(0,r.kt)("li",{parentName:"ul"},"parse request's value to that type")),(0,r.kt)("p",null,"Eg. make request ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /foo/bar"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'{\n  "detail": [\n    {\n      "type": "int_parsing",\n      "loc": [\n        "path",\n        "foo_id"\n      ],\n      "msg": "Input should be a valid integer, unable to parse string as an integer",\n      "input": "bar"\n    }\n  ]\n}\n')),(0,r.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"Data validation is performed under the hood by ",(0,r.kt)("inlineCode",{parentName:"p"},"Pydantic"))),(0,r.kt)("h2",{id:"path-operation-defining-order"},"Path operation defining order"),(0,r.kt)("p",null,"FastAPI read path operation in order it defined. "),(0,r.kt)("p",null,"FastAPI will pick first one that match."),(0,r.kt)("p",null,"eg:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get("/users/{user_id}")\nasync def read_user(user_id: str):\n    return {"user_id": user_id}\n\n@app.get("/users/me") # never match\nasync def read_user_me():\n    return {"user_id": "the current user"}\n')),(0,r.kt)("p",null,"function ",(0,r.kt)("inlineCode",{parentName:"p"},"read_user_me")," will never be executed bc request always match ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/{user_id}")),(0,r.kt)("h2",{id:"define-set-of-valid-values-for-path-parameters"},"Define set of valid values for path parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'from enum import Enum\n\n# highlight-start\n# must inherit `str` and `Enum`\nclass ModelName(str, Enum):\n# highlight-end\n    foo_key = "foo"\n    bar_key = "bar"\n    baz_key = "baz"\n\n@app.get("/models/{model_name}")\nasync def get_model(model_name: ModelName):\n    # value here can only be \'foo\', \'bar\' or \'baz\'\n    value = model_name.value\n')),(0,r.kt)("h2",{id:"path-parameters-that-contain-file-path"},"Path parameters that contain file path"),(0,r.kt)("p",null,"U might want user to pass file path as path parameters in the request"),(0,r.kt)("p",null,"Eg. for endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"/files/{file_path}"),", passing ",(0,r.kt)("inlineCode",{parentName:"p"},"path/to/user/file")," then whole url would be ",(0,r.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," mis-interpreted ")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"/file/path/to/user/file")),(0,r.kt)("p",null,"FastAPI allow u to extract it as a single string value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'# highlight-next-line\n@app.get("/files/{file_path:path}")\nasync def read_file(file_path: str):\n    return {"file_path": file_path}\n')),(0,r.kt)("p",null,"So the request ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /files/path/to/user/file")," would match ",(0,r.kt)("inlineCode",{parentName:"p"},"read_file")," function and argument ",(0,r.kt)("inlineCode",{parentName:"p"},"file_path")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"/path/to/user/file")),(0,r.kt)(u,{type:"tip",title:"tip",mdxType:"Admonition"},(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},":path")," any ",(0,r.kt)("inlineCode",{parentName:"p"},"/file")," route would match, so it act like wildcard route ",(0,r.kt)("inlineCode",{parentName:"p"},"/file/**")," .")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/path-params"},"https://fastapi.tiangolo.com/tutorial/path-params"))))}f.isMDXComponent=!0}}]);