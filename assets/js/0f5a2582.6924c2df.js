"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[5797],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,f=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return t?a.createElement(f,i(i({ref:n},d),{},{components:t})):a.createElement(f,i({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6091:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={last_update:{date:new Date("2025-09-04T13:43:12.000Z")},tags:["FastAPI","python"]},i="Dependencies Injection",s={unversionedId:"framework/fastAPI/dependencies-injection/index",id:"framework/fastAPI/dependencies-injection/index",title:"Dependencies Injection",description:'FastAPI can execte "callable" object (function , class) that should be exectued before path operation function.',source:"@site/docs/framework/fastAPI/4_dependencies-injection/index.mdx",sourceDirName:"framework/fastAPI/4_dependencies-injection",slug:"/framework/fastAPI/dependencies-injection/",permalink:"/recaller/docs/framework/fastAPI/dependencies-injection/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/framework/fastAPI/4_dependencies-injection/index.mdx",tags:[{label:"FastAPI",permalink:"/recaller/docs/tags/fast-api"},{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1756993392,formattedLastUpdatedAt:"Sep 4, 2025",frontMatter:{last_update:{date:"2025-09-04T13:43:12.000Z"},tags:["FastAPI","python"]},sidebar:"default",previous:{title:"Request Body",permalink:"/recaller/docs/framework/fastAPI/request-body"},next:{title:"Python",permalink:"/recaller/docs/language/python/"}},l={},p=[{value:"Function as dependency",id:"function-as-dependency",level:2},{value:"Class as dependency",id:"class-as-dependency",level:2},{value:"Sub dependencies",id:"sub-dependencies",level:2},{value:"Declare dependencies in path operation decorator",id:"declare-dependencies-in-path-operation-decorator",level:2},{value:"Global Dependencies",id:"global-dependencies",level:2},{value:"Context manager as dependencies",id:"context-manager-as-dependencies",level:2},{value:"Handling error inside context manager dependencies",id:"handling-error-inside-context-manager-dependencies",level:3}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},c=d("Color"),m=d("Admonition"),u={toc:p};function f(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dependencies-injection"},"Dependencies Injection"),(0,r.kt)("p",null,'FastAPI can execte "callable" object (function , class) that should be exectued before path operation function.'),(0,r.kt)("p",null,"Callable's argument, including sub-dependencies, will ",(0,r.kt)(c,{color:"var(--secondary-font-color)",mdxType:"Color"}," be treated as they are the path operation argument ")," themselvees."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def call_this_first(query_param1: str, query_param2: int, request_body: RequestBodyClass):\n  return {\n    'query_param1': query_param1,\n    'query_param2': query_param2,\n    'request_body': request_body\n  }\n\n@app.get('/foo')\ndef foo(result_from_dependency: Annotated[str , Depends(call_this_first)]):\n  print(result_from_dependency) \n  # output:  {\n  #   'query_param1': <value>,\n  #   'query_param2': <value>,\n  #   'request_body': <value>\n  # }\n")),(0,r.kt)("p",null,"The value returned from callable then passed as an argument to the path operation function."),(0,r.kt)("h2",{id:"function-as-dependency"},"Function as dependency"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'from pydantic import BaseModel\nfrom typing import Annotated\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\nclass CommonRequestBody(BaseModel):\n  foo: str\n  bar: int\n\n\n# highlight-next-line\nasync def common_parameters(request_body: CommonRequestBody,  q: str | None = None, skip: int = 0, limit: int = 100):\n    return {"q": q, "skip": skip, "limit": limit}\n\n@app.get("/items/")\n# highlight-next-line\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get("/users/")\n# highlight-next-line\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"common_parameters")," function act like middleware function. "),(0,r.kt)("p",null,"FastAPI will execute it and pass its return value to path operation"),(0,r.kt)("p",null,"FastAPI will also interpret its argument, (",(0,r.kt)("inlineCode",{parentName:"p"},"request_body"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"q")," ",(0,r.kt)("inlineCode",{parentName:"p"},"skip")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"limit"),"), as request properties (header, query, body)"),(0,r.kt)("details",null,(0,r.kt)("summary",null," Code above can be written similarly this way "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'# .....\n\n@app.get("/items/")\nasync def read_items(request_body: CommonRequestBody,  q: str | None = None, skip: int = 0, limit: int = 100):\n    pass\n\n\n@app.get("/users/")\nasync def read_users(request_body: CommonRequestBody,  q: str | None = None, skip: int = 0, limit: int = 100):\n    pass\n')),(0,r.kt)("p",null,"View it as a reusable block of code")),(0,r.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"Return value of dependency function can be anything. Its type better match with ",(0,r.kt)("inlineCode",{parentName:"p"},"Annotated"))),(0,r.kt)("h2",{id:"class-as-dependency"},"Class as dependency"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'from typing import Annotated\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\nclass CommonQueryParams:\n  # highlight-next-line\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get("/items/")\n# highlight-next-line\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    # `commons` is a class instance\n    pass\n')),(0,r.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,r.kt)("p",null,"Shorthand style"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"async def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n  pass\n\n# similar to\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n  pass\n"))),(0,r.kt)("h2",{id:"sub-dependencies"},"Sub dependencies"),(0,r.kt)("p",null,"Your dependency function can also depends on other function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def baz(query2: str):\n    return 'baz'\n  \ndef bar(query1: str, value_return_from_baz: Annotated[any, Depends(baz)]):\n    return 'bar' + value_return_from_baz\n\n@app.get(\"/foo/\")\nasync def foo(bar: Annotated[dict, Depends(bar)]):\n    pass\n")),(0,r.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,r.kt)("p",null,"In a single request cycle, if a dependency function is used multiple time. FastAPI will call it only once."),(0,r.kt)("p",null,"Subsequece call in the same request cycle will be returned with cache"),(0,r.kt)("p",null,"You can disable caching by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"# here get_value will be called every time it is used\ndef foo(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    pass\n"))),(0,r.kt)("h2",{id:"declare-dependencies-in-path-operation-decorator"},"Declare dependencies in path operation decorator"),(0,r.kt)("p",null,"Dependencies can be add via decorator but this way their return value will not be passed to the path operation function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def verify_token(x_token: Annotated[str, Header()]):\n    # do something\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    # do something\n    return x_key\n\n# highlight-next-line\n@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n  pass\n')),(0,r.kt)("h2",{id:"global-dependencies"},"Global Dependencies"),(0,r.kt)("p",null,"Apply callable to all routes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"from fastapi import Depends, FastAPI, Header\nfrom typing_extensions import Annotated\n\ndef verify_token(x_token: Annotated[str, Header()]):\n  pass\n\ndef verify_key(x_key: Annotated[str, Header()]):\n  pass\n\n# highlight-next-line\napp = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n")),(0,r.kt)("h2",{id:"context-manager-as-dependencies"},"Context manager as dependencies"),(0,r.kt)("p",null,"FastAPI support dependency function that have setup / teardown step"),(0,r.kt)("p",null,"FastAPI accept any function that valid to use with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager"},(0,r.kt)("inlineCode",{parentName:"a"},"contextmanager"))," or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/contextlib.html#contextlib.asynccontextmanager"},(0,r.kt)("inlineCode",{parentName:"a"},"asynccontextmanager"))," decorator "),(0,r.kt)("p",null,"value yielded from dependency function will be passed to path operation"),(0,r.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"The dependency function dont need to be decorated with context manager decorator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def foo():\n    print('foo')\n    yield 'yielded from foo'\n    print('teardown' , foo.__name__)\n\n@app.get(\"/gg\")\ndef read_items(foo: Annotated[dict, Depends(foo)]):\n    print('path operation with foo =', foo)\n    return foo\n\n# output:\n# foo\n# path operation with foo = yielded from foo\n# teardown foo\n")),(0,r.kt)("p",null,"The code after ",(0,r.kt)("inlineCode",{parentName:"p"},"yield")," statement is executed after creating the HTTP response but before sending it."),(0,r.kt)("details",null,(0,r.kt)("summary",null," see multiple context manager dependencies chanined together  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def first():\n    name = first.__name__\n    print(name)\n    yield name\n    print('teardown' , name)\n\ndef second(first: Annotated[any, Depends(first)]):\n    name = second.__name__\n    print(name)\n    yield name\n    print('teardown' , name)\n    \ndef third(second: Annotated[any, Depends(second)]):\n    name = third.__name__\n    print(name)\n    yield name\n    print('teardown' , name)\n\n\n@app.get(\"/items/\")\nasync def read_items(third: Annotated[dict, Depends(third)]):\n    print('path operation')\n    return third\n\n# output:\n# first\n# second\n# third\n# path operation\n# teardown third\n# teardown second\n# teardown first\n"))),(0,r.kt)("h3",{id:"handling-error-inside-context-manager-dependencies"},"Handling error inside context manager dependencies"),(0,r.kt)("p",null,"If an exception is raised inside the caller, it then will be passed to a context manager dependency"),(0,r.kt)("p",null,"Context manager dependency can handle it with ",(0,r.kt)("inlineCode",{parentName:"p"},"except")," clause or reraise the exception"),(0,r.kt)(m,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"The application will throw error, (user will get 500 Internal Server Error response) when an exception is passed from the caller to dependency function and it decide to"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"not reraise an exception"),(0,r.kt)("li",{parentName:"ul"},"raising a non-",(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/handling-errors/#use-httpexception"},"HTTP-like exception")," (one that does not trigger response to be returned)"))),(0,r.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,r.kt)("p",null,"You should always reraised an exception on context manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo():\n    try:\n        yield "bar"\n    except:\n        print("logging error")\n        # highlight-next-line\n        raise\n'))),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/dependencies"},"https://fastapi.tiangolo.com/tutorial/dependencies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/dependencies/classes-as-dependencies/"},"https://fastapi.tiangolo.com/tutorial/dependencies/classes-as-dependencies/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/"},"https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/"},"https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/dependencies/global-dependencies/"},"https://fastapi.tiangolo.com/tutorial/dependencies/global-dependencies/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/"},"https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/"))))}f.isMDXComponent=!0}}]);