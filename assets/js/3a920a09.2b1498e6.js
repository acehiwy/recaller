"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[2349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,g=d["".concat(s,".").concat(c)]||d[c]||m[c]||a;return n?o.createElement(g,i(i({ref:t},u),{},{components:n})):o.createElement(g,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={last_update:{date:new Date("2025-10-01T13:56:30.747Z")}},i="Function",l={unversionedId:"language/python/function/index",id:"language/python/function/index",title:"Function",description:"call a function",source:"@site/docs/language/python/10_function/index.mdx",sourceDirName:"language/python/10_function",slug:"/language/python/function/",permalink:"/recaller/docs/language/python/function/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/10_function/index.mdx",tags:[],version:"current",lastUpdatedAt:1759326990.747,formattedLastUpdatedAt:"Oct 1, 2025",frontMatter:{last_update:{date:"2025-10-01T13:56:30.747Z"}},sidebar:"default",previous:{title:"Dictionaries",permalink:"/recaller/docs/language/python/dictionary"},next:{title:"Class",permalink:"/recaller/docs/language/python/class"}},s={},p=[{value:"Default Argument",id:"default-argument",level:2},{value:"Keyword argument",id:"keyword-argument",level:2},{value:"<code>**</code> syntax",id:"-syntax",level:3},{value:"<code>*</code> syntax (Arbitrary Argument Lists)",id:"-syntax-arbitrary-argument-lists",level:2},{value:"Unpacking argument (<code>*foo</code>, <code>**bar</code>)",id:"unpacking-argument-foo-bar",level:2},{value:"Lambda Expression",id:"lambda-expression",level:2},{value:"Special parameter",id:"special-parameter",level:2},{value:"Function Annotations",id:"function-annotations",level:2},{value:'<Color color="var(--not-require-but-good-to-know-font-color)"> Documentation String </Color>',id:"-documentation-string-",level:2},{value:"Convention",id:"convention",level:3}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=u("Admonition"),d=u("Color"),c={toc:p};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"function"},"Function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def function_name(first_arg, second_arg):\n  # fucntion logic\n  return "something"\n')),(0,r.kt)("p",null,"call a function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"function_name('foo', 'bar')\n")),(0,r.kt)("h2",{id:"default-argument"},"Default Argument"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo(required_arg, optional_arg="default value"):\n  pass\n')),(0,r.kt)(m,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"The default values are evaluated ",(0,r.kt)(d,{color:"var(--primary-font-color)",mdxType:"Color"}," once ")," at the point of function definition in the defining scope. not each time the function is called."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"i = 5\n\ndef f(arg=i):\n    print(arg)\n\nf()\n# output: 6\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def add_item(item, items=[]):  # BAD\n    items.append(item)\n    return items\n\nprint(add_item(1))  # [1]\nprint(add_item(2))  # [1, 2]  \u2190 surprise!\n")),(0,r.kt)("p",null,"Solution:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def add_item(item, items=None):\n    # highlight-start\n    if items is None:\n        items = []\n    # highlight-end\n    items.append(item)\n    return items\n\n"))),(0,r.kt)("h2",{id:"keyword-argument"},"Keyword argument"),(0,r.kt)("p",null,"instead of remember which argument should be in which position when function is called. u can use parameter name to pass an argument to that parameter regardless of the position"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo(arg_1, arg_2, arg_3, optional_arg="default value"):\n    pass\n\nfoo(arg_2=2, arg_3=3, arg_1=1)\nfoo(1, optional_arg=4, arg_3 = 3, arg_2 = 2)\n')),(0,r.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"keyword arguments must follow positional arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=",title:""},"# highlight-error-next-line\nfoo(arg_2 = 2, 1, 3) # SyntaxError: positional argument follows keyword argument\n"))),(0,r.kt)("h3",{id:"-syntax"},(0,r.kt)("inlineCode",{parentName:"h3"},"**")," syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"**")," allow caller to pass any number of keyword argument to the function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo(arg_1, arg_2, **keywords):\n  print("arg_1:", arg_1)\n  print("arg_2:", arg_2)\n  print("keywords:", keywords)\n\n\nfoo("1", arg_2=\'2\', other="other1", other2="other2")\n# arg_1: 1\n# arg_2: 2\n# keywords: {\'other\': \'other1\', \'other2\': \'other2\'}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"**")," represent all ",(0,r.kt)(d,{color:"var(--primary-font-color)",mdxType:"Color"}," other keyword argument ")," passed to the function."),(0,r.kt)(m,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"**")," 's type is Mapping Type")),(0,r.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"The order of the keyword arguments is guaranteed to match the order they were provided in the function call.")),(0,r.kt)("h2",{id:"-syntax-arbitrary-argument-lists"},(0,r.kt)("inlineCode",{parentName:"h2"},"*")," syntax (Arbitrary Argument Lists)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"*")," allow caller to pass any number of argument to the function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo(pos1, pos2, *the_rest, kw="kw1"):\n  pass\n\ndef concat(*args, sep="/"):\n    return sep.join(args)\n\nconcat("earth", "mars", "venus", sep=".")\n')),(0,r.kt)(m,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"*")," 's type is Tuple ")),(0,r.kt)("h2",{id:"unpacking-argument-foo-bar"},"Unpacking argument (",(0,r.kt)("inlineCode",{parentName:"h2"},"*foo"),", ",(0,r.kt)("inlineCode",{parentName:"h2"},"**bar"),")"),(0,r.kt)("p",null,"A list can be passed to function as arbitrary argument list using ",(0,r.kt)("inlineCode",{parentName:"p"},"*<list variable name>")," syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo(pos1 , *args):\n  pass\n\nexisting_list = [2,3,4]\n# highlight-next-line\nfoo("1" , *existing_list)\n# this would be unpacked to\n# foo("1" , 2,3,4)\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,"A dictionary can be passed to function as keyword arguments using ",(0,r.kt)("inlineCode",{parentName:"p"},"**<list variable name>")," syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo(pos1 , **keywords):\n  pass\n\nexisting_dict = {"key1" : 1 , "key2": 2}\n# highlight-next-line\nfoo("1" , **existing_dict)\n# this would be unpacked to\n# foo("1" , key1 = 1, key2 = 2 )\n')),(0,r.kt)("h2",{id:"lambda-expression"},"Lambda Expression"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"lambda a, b: a+b\n")),(0,r.kt)("p",null,"sugar syntax to define a function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'result = lambda argument1, argument2: "single expression act as return statement"\n\n# equivalent to\ndef anonymous_function(argument1, argument2):\n  return "single expression act as return statement"\n\nresult = anonymous_function\n')),(0,r.kt)("h2",{id:"special-parameter"},"Special parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n  pass\n")),(0,r.kt)("p",null,"parameter syntax ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," and '*' restrict the way argument passed to the function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n      -----------    ----------     ----------\n        |             |                  |\n        |        Positional or keyword   |\n        |                                - Keyword only\n         -- Positional only\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"/")," restrict its left-side parameter to be positional only"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def foo(pos1, pos2, /, pos_or_key): # force pos1 and pos2 to be positional. pos_or_key isn't affected , it can be either positional or keyword\n  pass\n\n\nfoo(1,2, 3) # valid\nfoo(1,2, pos_or_key=3) # valid\n# highlight-error-start\nfoo(pos2=2, pos1=1, pos_or_key=3) # invalid\n# TypeError: foo() got some positional-only arguments passed as keyword arguments: 'pos1, pos2'\n# highlight-error-end\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"*")," restrict its right-side parameter to be keyword only"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def foo(pos1, * , key1, key2):\n  pass\n\nfoo(1, key1=1, key2=2) # valid\n# highlight-error-start\nfoo(1, 2, 3) # invalid\n# TypeError: foo() takes 1 positional argument but 3 were given\n# highlight-error-end\n")),(0,r.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,r.kt)("p",null,"For an API, use positional-only to prevent breaking API changes if the parameter\u2019s name is modified in the future.")),(0,r.kt)("h2",{id:"function-annotations"},"Function Annotations"),(0,r.kt)("p",null,"A info about function parameter's type and its return type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def f(ham: str, eggs: str = 'eggs') -> str:\n    print(\"Annotations:\", f.__annotations__)  \n")),(0,r.kt)(m,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,"The type have no effect on any other part of the function")),(0,r.kt)("h2",{id:"-documentation-string-"},(0,r.kt)(d,{color:"var(--not-require-but-good-to-know-font-color)",mdxType:"Color"}," Documentation String ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'def foo():\n  """Documentation String title.\n  \n  Function description paragraph 1.\n\n  Function description paragraph 1.\n  """\n  pass\n')),(0,r.kt)("h3",{id:"convention"},"Convention"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First line should be short, concise summary of the function purpose.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Begin with cappital letter"),(0,r.kt)("li",{parentName:"ul"},"Start after ",(0,r.kt)("inlineCode",{parentName:"li"},'"""')," syntax"))),(0,r.kt)("li",{parentName:"ul"},"Second line should be a blank line, If there is more line than the first"),(0,r.kt)("li",{parentName:"ul"},"The following lines should be one or more paragraphs describing a function"),(0,r.kt)("li",{parentName:"ul"},'All non-empty line end with "."')),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/controlflow.html#defining-functions"},"https://docs.python.org/3/tutorial/controlflow.html#defining-functions"))))}g.isMDXComponent=!0}}]);