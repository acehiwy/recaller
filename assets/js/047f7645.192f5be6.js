"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[6797],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=o,h=m["".concat(p,".").concat(c)]||m[c]||u[c]||r;return n?i.createElement(h,a(a({ref:t},d),{},{components:n})):i.createElement(h,a({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<r;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1e4,tags:["python"]},a="Working with file",l={unversionedId:"language/python/input-output",id:"language/python/input-output",title:"Working with file",description:"First argument is the file name.",source:"@site/docs/language/python/input-output.mdx",sourceDirName:"language/python",slug:"/language/python/input-output",permalink:"/recaller/docs/language/python/input-output",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/input-output.mdx",tags:[{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1756908807,formattedLastUpdatedAt:"Sep 3, 2025",sidebarPosition:1e4,frontMatter:{sidebar_position:1e4,tags:["python"]},sidebar:"default",previous:{title:"Error and Exception",permalink:"/recaller/docs/language/python/error-and-exception"},next:{title:"Modules",permalink:"/recaller/docs/language/python/modules"}},p={},s=[{value:"Read file",id:"read-file",level:2},{value:"<code>read</code> method",id:"read-method",level:3},{value:"<code>readline</code> method",id:"readline-method",level:3},{value:"Read JSON",id:"read-json",level:3},{value:"Write file",id:"write-file",level:2},{value:"Write JSON",id:"write-json",level:3},{value:"Move file&#39;s pointer position",id:"move-files-pointer-position",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=d("Color"),m=d("Admonition"),c={toc:s};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"working-with-file"},"Working with file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with open('path/to/file', 'w', encoding=\"utf-8\") as f\n  file_content = f.read()\n\n\n# check whether file is closed\nf.closed\n# True\n")),(0,o.kt)("p",null,"First argument is the file name."),(0,o.kt)("p",null,"Second ",(0,o.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," optional ")," argument is a string describing how the file will be used:"),(0,o.kt)("p",null,"optional ",(0,o.kt)("inlineCode",{parentName:"p"},"encoding")," keyword argument, default is ",(0,o.kt)("inlineCode",{parentName:"p"},"utf-8"),", is the name of encoding use to encode and decode the file"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"r"),": open for reading (default)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"file's pointer start at the beginning"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"w"),": open for writing",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"remove all file content or create a file if does not exist."),(0,o.kt)("li",{parentName:"ul"},"file's pointer start at the beginning"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x"),": open for exclusive creation, failing if the file already exists"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"a"),": open for writing. appending to the end of file ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"create file if does not exist"),(0,o.kt)("li",{parentName:"ul"},"all writes append to the end of the file regardless of the current pointer position")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"b"),": binary mode"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"t"),": text mode (default)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"+"),": open for updating (reading and writing)")),(0,o.kt)("p",null,"the default mode is ",(0,o.kt)("inlineCode",{parentName:"p"},"r")," (synonym of ",(0,o.kt)("inlineCode",{parentName:"p"},"rt"),")"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"w+")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"w+b")," open and truncate the file.\n",(0,o.kt)("inlineCode",{parentName:"p"},"r+")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"r+b")," open the file with no truncation."),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"Mode ",(0,o.kt)("inlineCode",{parentName:"p"},"b"),", contents are return as ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#bytes"},(0,o.kt)("inlineCode",{parentName:"a"},"bytes"))," object"),(0,o.kt)("p",null,"Mode ",(0,o.kt)("inlineCode",{parentName:"p"},"t"),", contents are return as ",(0,o.kt)("inlineCode",{parentName:"p"},"str"))),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"with")," keyword ensure that file is closed after the process is done even if an exception is raised.")),(0,o.kt)(m,{type:"info",title:"later",mdxType:"Admonition"},(0,o.kt)("p",null,"When ",(0,o.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," reading ")," in text mode, the default is to convert platform-specific line endings (",(0,o.kt)("inlineCode",{parentName:"p"},"\\n")," on Unix, ",(0,o.kt)("inlineCode",{parentName:"p"},"\\r\\n")," on Windows) to just ",(0,o.kt)("inlineCode",{parentName:"p"},"\\n"),". "),(0,o.kt)("p",null,"When ",(0,o.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," writing ")," in text mode, the default is to convert occurrences of ",(0,o.kt)("inlineCode",{parentName:"p"},"\\n")," ",(0,o.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," back ")," to platform-specific line endings.\nThis behind-the-scenes modification to file data is fine for text files, but will corrupt binary data like that in JPEG or EXE files.\nBe very careful to use binary mode when reading and writing such files.")),(0,o.kt)(m,{type:"info",title:"later",mdxType:"Admonition"},(0,o.kt)("p",null,"In append binary mode, ",(0,o.kt)("inlineCode",{parentName:"p"},"a+b"),", Pointer position will be moved ahead as the amount of bytes written regardless of its position."),(0,o.kt)("p",null,"eg. pointer position is at 2 on 10 bytes file, then u write 3 bytes to the end resulting 13 bytes file. the pointer would move from 2 -> 5. not 10 -> 13")),(0,o.kt)("h2",{id:"read-file"},"Read file"),(0,o.kt)("h3",{id:"read-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"read")," method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with open('filepath') as f:\n  # do something\n  file_content = f.read()\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<file>.read(<size>)")," method return string or bytes object."),(0,o.kt)("p",null,"optional ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," numeric argument can be provided to specify how much characters (in text mode) or bytes (in binary mode) are read and returned. default is to return all the file content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with open...:\n  first_10_char = file.read(10)\n  _11_to_20th_char = file.read(10)\n")),(0,o.kt)("h3",{id:"readline-method"},(0,o.kt)("inlineCode",{parentName:"h3"},"readline")," method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with open('foo.py') as f:\n  line_1 = f.readline()\n  line_2 = f.readline()\n\n  # or loop over the rest lines\n  for line in f:\n    pass\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"readline()")," reads a single line from the file"),(0,o.kt)("p",null,"a newline character (",(0,o.kt)("inlineCode",{parentName:"p"},"\\n"),") is left at the end of the string"),(0,o.kt)(m,{type:"tip",title:"tip",mdxType:"Admonition"},(0,o.kt)("p",null,"Returning each line as a list"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"my_list = f.readlines()\n\n# or\nmy_list = list(f)\n"))),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"read")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"readline")," method return empty string if the end of the file is reached.")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"read operation return type is string. reading number have to be cast to int")),(0,o.kt)("h3",{id:"read-json"},"Read JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"with open('filepath' , 'r') as f:\n    result = json.load(f)\n")),(0,o.kt)("h2",{id:"write-file"},"Write file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"f.write('This is a test\\n') \n# 15 \n\n# write list to file\nf.writelines(['what' , 'ever'])\n")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"write")," method return number of ",(0,o.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," characters ")," written")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"write")," method take string or bytes object. Other type of object need to be converted."),(0,o.kt)("h3",{id:"write-json"},"Write JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"arr = ['item1' , 'item2' , 3 , 3333 , (1,2,3,4)]\ndict = {'k1' : 1 , 'k2' : [1,2,3,4] , 'k3' : \"foo\"}\n\nwith open('filepath' , 'w+') as f:\n    json.dump(arr, f)\n    json.dump(dict, f)\n")),(0,o.kt)("h2",{id:"move-files-pointer-position"},"Move file's pointer position"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"f.seek(<offset> : int, <whence>: 0 | 1 | 2)\n")),(0,o.kt)("p",null,"move file pointer for ",(0,o.kt)("inlineCode",{parentName:"p"},"<offset>")," ",(0,o.kt)(u,{color:"var(--primary-font-color)",mdxType:"Color"}," byte ")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"<whence>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"whence")," argument accept"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"0 (default): beginning of the file "),(0,o.kt)("li",{parentName:"ul"},"1: at current file pointer position"),(0,o.kt)("li",{parentName:"ul"},"2: end of the file")),(0,o.kt)("p",null,"Eg:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"# move ahead 3 byte from the beginning\nf.seek(3,0) \n\n# move ahead 3 byte from the current pointer position\nf.seek(3,1)\n\n# move back 3 byte from the end\nf.seek(-3,2)\n\n# move to the end of the file\nf.seek(0,2)\n")),(0,o.kt)(m,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"seek")," function should be used when you opening file in ",(0,o.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," binary mode "))),(0,o.kt)(m,{type:"danger",title:"danger",mdxType:"Admonition"},(0,o.kt)("p",null,"When u open file ",(0,o.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," in text mode "),", ",(0,o.kt)("inlineCode",{parentName:"p"},"open('file', 'r+t')")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"seek"),"'s argument should follow these otherwise error might be raised:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"offset")," argument should be align with value return from ",(0,o.kt)("inlineCode",{parentName:"li"},"f.tell()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"whence")," argument can only be ",(0,o.kt)("inlineCode",{parentName:"li"},"0")),(0,o.kt)("li",{parentName:"ul"},"only 2 exception are: ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"move to the beginning, ",(0,o.kt)("inlineCode",{parentName:"li"},"seek(0)"),", of the file"),(0,o.kt)("li",{parentName:"ul"},"move to the end, ",(0,o.kt)("inlineCode",{parentName:"li"},"seek(0,2)"),", of the file")))),(0,o.kt)(m,{type:"info",title:"later",mdxType:"Admonition"},(0,o.kt)("p",null,"Reason: In text mode, the read operation should return a valid charater(s) but if u move file pointer to the middle of the character bytes, no one could know which character it suppose to be.\n( If somehow u dont understand these sentences, read more about ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=GMF2Z1EZHXk"},"character encoding")," )"),(0,o.kt)("p",null,"If you want to move file's pointer in text mode, u can use ",(0,o.kt)("inlineCode",{parentName:"p"},"read")," instead. eg move 4 ahead character ",(0,o.kt)("inlineCode",{parentName:"p"},"read(4)")))),(0,o.kt)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,o.kt)("p",null,"combine file paths:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"from pathlib import Path\n\nfile_paths = ['/example' , 'file' , 'path' , 'file.txt' ]\n\npath_obj = Path(*file_paths)\nprint(path_obj.as_posix())\n# /example/file/path/file.txt\n\n\n#or\npath_obj = Path('base-path')\npath_obj = path_obj.joinpath(*['file' , 'path']) # joinpath is pure function\nprint(path_obj.as_posix())\n# base-path/file/path\n")),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"sources"},"Sources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/inputoutput.html"},"https://docs.python.org/3/tutorial/inputoutput.html")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/functions.html#open"},"https://docs.python.org/3/library/functions.html#open")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/1466000/difference-between-modes-a-a-w-w-and-r-in-built-in-open-function"},"https://stackoverflow.com/questions/1466000/difference-between-modes-a-a-w-w-and-r-in-built-in-open-function")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=GMF2Z1EZHXk"},"https://www.youtube.com/watch?v=GMF2Z1EZHXk")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=ut74oHojxqo"},"https://www.youtube.com/watch?v=ut74oHojxqo"))))}h.isMDXComponent=!0}}]);