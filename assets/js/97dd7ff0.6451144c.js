"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[6160],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1e4,tags:["python"]},i="Error and Exception",s={unversionedId:"language/python/error-and-exception",id:"language/python/error-and-exception",title:"Error and Exception",description:"A except clause only handle exception from its try, not from its neighbor except.",source:"@site/docs/language/python/error-and-exception.mdx",sourceDirName:"language/python",slug:"/language/python/error-and-exception",permalink:"/recaller/docs/language/python/error-and-exception",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/error-and-exception.mdx",tags:[{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1757103143,formattedLastUpdatedAt:"Sep 5, 2025",sidebarPosition:1e4,frontMatter:{sidebar_position:1e4,tags:["python"]},sidebar:"default",previous:{title:"Dictionaries",permalink:"/recaller/docs/language/python/dictionary"},next:{title:"Working with file",permalink:"/recaller/docs/language/python/input-output"}},l={},p=[{value:"<code>raise</code> keyword",id:"raise-keyword",level:2},{value:"re-raise exception",id:"re-raise-exception",level:3},{value:"<code>raise</code> ... <code>from</code>",id:"raise--from",level:3},{value:"Exception class",id:"exception-class",level:2},{value:"Exception arguments",id:"exception-arguments",level:3},{value:"User-define exception",id:"user-define-exception",level:3},{value:"<code>else</code> clause",id:"else-clause",level:2},{value:"<code>finally</code> clause",id:"finally-clause",level:2},{value:"Raising multiple exceptions",id:"raising-multiple-exceptions",level:2},{value:"Handle <code>ExceptionGroup</code>",id:"handle-exceptiongroup",level:3},{value:"Add more info to the exception",id:"add-more-info-to-the-exception",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=c("Admonition"),d=c("Color"),m={toc:p};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-and-exception"},"Error and Exception"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"  try:\n    # do something\n  except ReferenceError:\n    # handle error\n  except (TypeError, ValueError) as my_error:\n    # handle error\n  except BaseException as e:\n    # catch the rest error, with e variable usage\n  except:\n    # catch the rest error\n")),(0,a.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"except")," clause only handle exception from its ",(0,a.kt)("inlineCode",{parentName:"p"},"try"),", not from its neighbor ",(0,a.kt)("inlineCode",{parentName:"p"},"except"),". ")),(0,a.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,a.kt)("p",null,"See more for ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/exceptions.html#bltin-exceptions"},"built-in exceptions"))),(0,a.kt)("h2",{id:"raise-keyword"},(0,a.kt)("inlineCode",{parentName:"h2"},"raise")," keyword"),(0,a.kt)("p",null,"use to manually force an exception to occur"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"raise")," must be followed by either an exception ",(0,a.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," instance ")," or an exception class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"raise BaseException('foo')\n\nraise BaseException # same as raise BaseException()\n")),(0,a.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"If an exception is followed ",(0,a.kt)("inlineCode",{parentName:"p"},"raise"),", it will be automatically instantiated with no constructor arguments")),(0,a.kt)("h3",{id:"re-raise-exception"},"re-raise exception"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n  raise TypeError\nexcept:\n  print('log something')\n  raise\n")),(0,a.kt)("h3",{id:"raise--from"},(0,a.kt)("inlineCode",{parentName:"h3"},"raise")," ... ",(0,a.kt)("inlineCode",{parentName:"h3"},"from")),(0,a.kt)("p",null,"To indicate that an exception is cause by another exception, use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def func():\n  raise ConnectionError\n\ntry:\n  func()\nexcept ConnectionError as exc:\n  # highlight-next-line\n  raise RuntimeError('Failed to open database') from exc\n")),(0,a.kt)("p",null,"output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'Traceback (most recent call last):\n  File "<stdin>", line 2, in <module>\n    func()\n    ~~~~^^\n  File "<stdin>", line 2, in func\nConnectionError\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File "<stdin>", line 4, in <module>\n    raise RuntimeError(\'Failed to open database\') from exc\nRuntimeError: Failed to open database\n')),(0,a.kt)("h2",{id:"exception-class"},"Exception class"),(0,a.kt)("p",null,"Class as exception can be raised."),(0,a.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"Class must inherit ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseException")," class")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'class ParentClassException(BaseException):\n  pass\n\nclass ChildClassException(ParentClassException): # inheritance\n  pass\n\ndef exception():\n  try:\n    raise ParentClassException()\n  except ChildClassException as class_instance:\n    print("not match, ParentClass is not ChildClass bc it does not have child\'s property")\n\n# this would match\n  try:\n    raise ChildClassException()\n  except ParentClassException:\n    print("match bc child have all properties of parent")\n')),(0,a.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"BaseException")," class is base class of all exception. Its subclass, ",(0,a.kt)("inlineCode",{parentName:"p"},"Exception"),", indicate non-fatal exceptions"),(0,a.kt)("p",null,"fatal error mean program should terminate")),(0,a.kt)("h3",{id:"exception-arguments"},"Exception arguments"),(0,a.kt)("p",null,"is a class constructor's argument passed to an exception class"),(0,a.kt)("p",null,"can access via ",(0,a.kt)("inlineCode",{parentName:"p"},"instance.args")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n    raise Exception('spam', 'eggs')\nexcept Exception as inst:\n    print(inst.args) \n    # ('spam', 'eggs')\n    print(inst)\n    # ('spam', 'eggs')\n")),(0,a.kt)("h3",{id:"user-define-exception"},"User-define exception"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"class MyError(Exception):\n  pass\n\nclass AnotherError(BaseException):\n  pass\n")),(0,a.kt)("h2",{id:"else-clause"},(0,a.kt)("inlineCode",{parentName:"h2"},"else")," clause"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"else")," block execute when try does not raise an exception."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n    pass\nexcept OSError:\n    pass\nelse:\n    print('exe when no error in try')\n")),(0,a.kt)(u,{type:"tip",title:"tip",mdxType:"Admonition"},(0,a.kt)("p",null,"else clause purpose is to avoid mixing up error in ",(0,a.kt)("inlineCode",{parentName:"p"},"try")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n  fucntion_1_might_raise_value_error()\n  function_2_might_raise_another_value_error() # <-- dont want this to be catched \nexcept ValueError:\n  pass\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n  fucntion_1_might_raise_value_error()\nexcept ValueError:\n  pass\nelse:\n  function_2_might_raise_another_value_error()\n"))),(0,a.kt)("h2",{id:"finally-clause"},(0,a.kt)("inlineCode",{parentName:"h2"},"finally")," clause"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n  pass\nexcept:\n  pass\nelse:\n  pass\n# highlight-start\nfinally:\n  # do something\n# highlight-end\n")),(0,a.kt)("p",null,"code inside ",(0,a.kt)("inlineCode",{parentName:"p"},"finally")," block are executed, ",(0,a.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"}," as the last task "),", in all cases whether or not an exception is raised regardless of its origin (raised from ",(0,a.kt)("inlineCode",{parentName:"p"},"try"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"except")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"else"),")"),(0,a.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"finally")," clause executes a ",(0,a.kt)("inlineCode",{parentName:"p"},"break"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement, exceptions are not re-raised.")),(0,a.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," statement reaches a ",(0,a.kt)("inlineCode",{parentName:"p"},"break"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement, the ",(0,a.kt)("inlineCode",{parentName:"p"},"finally")," clause will execute just prior to the ",(0,a.kt)("inlineCode",{parentName:"p"},"break"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement's execution.")),(0,a.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,a.kt)("p",null,"If a ",(0,a.kt)("inlineCode",{parentName:"p"},"finally")," clause includes a return statement, the returned value will be from ",(0,a.kt)("inlineCode",{parentName:"p"},"finally"),"'s return, not ",(0,a.kt)("inlineCode",{parentName:"p"},"try"),"'s return."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def bool_return():\n    try:\n        return True\n    finally:\n        return False\n\nbool_return()\n# False\n"))),(0,a.kt)(u,{type:"tip",title:"tip",mdxType:"Admonition"},(0,a.kt)("p",null,"In real world applications, the ",(0,a.kt)("inlineCode",{parentName:"p"},"finally")," clause is useful for releasing external resources (such as files or network connections)")),(0,a.kt)("h2",{id:"raising-multiple-exceptions"},"Raising multiple exceptions"),(0,a.kt)("p",null,"exceptions can be group together then raise as a single exception using ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/exceptions.html#ExceptionGroup"},(0,a.kt)("inlineCode",{parentName:"a"},"ExceptionGroup")),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"def f():\n    excs = [OSError('error 1'), SystemError('error 2')]\n    raise ExceptionGroup('exception group desceiption', excs)\n")),(0,a.kt)("p",null,"output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'  + Exception Group Traceback (most recent call last):\n  |   File "<stdin>", line 1, in <module>\n  |     f()\n  |     ~^^\n  |   File "<stdin>", line 3, in f\n  |     raise ExceptionGroup(\'exception group desceiption\', excs)\n  | ExceptionGroup: exception group desceiption (2 sub-exceptions)\n  +-+---------------- 1 ----------------\n    | OSError: error 1\n    +---------------- 2 ----------------\n    | SystemError: error 2\n    +------------------------------------\n')),(0,a.kt)("p",null,"it can also be nested"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"raise ExceptionGroup('des1', [ ValueError, ExceptionGroup('des2', [ TypeError ] ) ] )\n")),(0,a.kt)("h3",{id:"handle-exceptiongroup"},"Handle ",(0,a.kt)("inlineCode",{parentName:"h3"},"ExceptionGroup")),(0,a.kt)("p",null,"done by ",(0,a.kt)("inlineCode",{parentName:"p"},"except*")," clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n  raise ExceptionGroup('des1', [ SystemError, OSError ] )\nexcept* OSError as e:\n  pass\nexcept* SystemError as e:\n  pass\n")),(0,a.kt)("p",null,"It mean pick the exception",(0,a.kt)(d,{color:"var(--secondary-font-color)",mdxType:"Color"},"(s)")," from the group and its nested group to handle"),(0,a.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ExceptionGroup")," often the case in concurrency frameworks, when several tasks may have failed in parallel, but there are also other use cases where it is desirable to continue execution and collect multiple errors rather than raise the first exception."),(0,a.kt)("p",null,"Example use cases"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'excs = []\nfor test in tests:\n    try:\n        test.run()\n    except Exception as e:\n        excs.append(e)\n\nif excs:\n   raise ExceptionGroup("Test Failures", excs)\n'))),(0,a.kt)("h2",{id:"add-more-info-to-the-exception"},"Add more info to the exception"),(0,a.kt)("p",null,"Apart from desceiption / information when initialize the exception via constructor, more info can be added to the exception by ",(0,a.kt)("inlineCode",{parentName:"p"},"<exception>.add_note(<note> : string)")," method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"try:\n    raise TypeError('bad type')\nexcept Exception as e:\n    e.add_note('Add some information')\n    e.add_note('Add some more information')\n    raise\n")),(0,a.kt)("p",null,"output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"Traceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\n    raise TypeError('bad type')\nTypeError: bad type\nAdd some information\nAdd some more information\n")),(0,a.kt)("br",null),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"sources"},"Sources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/errors.html"},"https://docs.python.org/3/tutorial/errors.html"))))}h.isMDXComponent=!0}}]);