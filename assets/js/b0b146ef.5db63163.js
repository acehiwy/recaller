"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[9307],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),u=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,k=d["".concat(i,".").concat(p)]||d[p]||m[p]||a;return n?o.createElement(k,l(l({ref:t},c),{},{components:n})):o.createElement(k,l({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6989:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={tags:["rabbitmq","message broker","tool"]},l="Work Queues",s={unversionedId:"tool/rabbitmq/tutorial/work-queues",id:"tool/rabbitmq/tutorial/work-queues",title:"Work Queues",description:"In this one we'll create a Work Queue that will be used to distribute time-consuming tasks among multiple workers.",source:"@site/docs/tool/rabbitmq/2_tutorial/2_work-queues.mdx",sourceDirName:"tool/rabbitmq/2_tutorial",slug:"/tool/rabbitmq/tutorial/work-queues",permalink:"/recaller/docs/tool/rabbitmq/tutorial/work-queues",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tool/rabbitmq/2_tutorial/2_work-queues.mdx",tags:[{label:"rabbitmq",permalink:"/recaller/docs/tags/rabbitmq"},{label:"message broker",permalink:"/recaller/docs/tags/message-broker"},{label:"tool",permalink:"/recaller/docs/tags/tool"}],version:"current",lastUpdatedAt:1760063342,formattedLastUpdatedAt:"Oct 10, 2025",sidebarPosition:2,frontMatter:{tags:["rabbitmq","message broker","tool"]},sidebar:"default",previous:{title:"Hello World",permalink:"/recaller/docs/tool/rabbitmq/tutorial/hello-world"},next:{title:"Publish/Subscribe",permalink:"/recaller/docs/tool/rabbitmq/tutorial/publish-subscribe"}},i={},u=[{value:"Setting up",id:"setting-up",level:2},{value:"Producer",id:"producer",level:3},{value:"Consumer",id:"consumer",level:3},{value:"Running them",id:"running-them",level:3},{value:"Round-robin dispatching",id:"round-robin-dispatching",level:2},{value:"Message acknowledgment",id:"message-acknowledgment",level:2},{value:"Forgotten acknowledgment",id:"forgotten-acknowledgment",level:3},{value:"Message durability",id:"message-durability",level:2},{value:"Durable queue",id:"durable-queue",level:3},{value:"Message persistence",id:"message-persistence",level:3},{value:"Fair dispatch",id:"fair-dispatch",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=c("Color"),d=c("Admonition"),p=c("Tabs"),k=c("TabItem"),h={toc:u};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"work-queues"},"Work Queues"),(0,r.kt)("p",null,"In this one we'll create a Work Queue that will be used to distribute time-consuming tasks among multiple workers."),(0,r.kt)("p",null,"The main idea behind Work Queues (aka: Task Queues) is to avoid doing a resource-intensive task immediately and having to wait for it to complete."),(0,r.kt)("p",null,"Instead we ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," schedule the task to be done later "),"."),(0,r.kt)("p",null,"We encapsulate a task as a message and send it to a queue."),(0,r.kt)("p",null,"A worker process running in the background will pop the tasks and eventually execute the job."),(0,r.kt)("p",null,"When you run many workers the tasks will be shared between them."),(0,r.kt)("h2",{id:"setting-up"},"Setting up"),(0,r.kt)("p",null,"We will use ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout")," for time-consuming task."),(0,r.kt)("p",null,"We'll take the number of dots in the string representing onr second of work. For example, a fake task described by ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello...")," will take three seconds."),(0,r.kt)("h3",{id:"producer"},"Producer"),(0,r.kt)("p",null,"We will create ",(0,r.kt)("inlineCode",{parentName:"p"},"new_task.js")," file. This program will schedule tasks to our work queue:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=new_task.js showLineNumbers",title:"new_task.js",showLineNumbers:!0},'var amqp = require("amqplib/callback_api");\n\namqp.connect("amqp://localhost", function (error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function (error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n\n    // highlight-start\n    var queue = "task_queue";\n    var msg = process.argv.slice(2).join(" ") || "Hello World!";\n\n    channel.assertQueue(queue, {\n      durable: true,\n    });\n    channel.sendToQueue(queue, Buffer.from(msg), {\n      persistent: true,\n    });\n    console.log(" [x] Sent \'%s\'", msg);\n    // highlight-end\n  });\n  setTimeout(function () {\n    connection.close();\n    process.exit(0);\n  }, 500);\n});\n')),(0,r.kt)("h3",{id:"consumer"},"Consumer"),(0,r.kt)("p",null,"We will create ",(0,r.kt)("inlineCode",{parentName:"p"},"worker.js")," file. it needs to fake a second of work for every dot in the message body."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=worker.js showLineNumbers",title:"worker.js",showLineNumbers:!0},'var amqp = require("amqplib/callback_api");\n\namqp.connect("amqp://localhost", function (error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function (error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var queue = "task_queue";\n\n    // This makes sure the queue is declared before attempting to consume from it\n    // highlight-start\n    channel.assertQueue(queue, {\n      durable: true,\n    });\n\n    channel.consume(\n      queue,\n      function (msg) {\n        var secs = msg.content.toString().split(".").length - 1;\n\n        console.log(" [x] Received %s", msg.content.toString());\n        setTimeout(function () {\n          console.log(" [x] Done");\n        }, secs * 1000);\n      },\n      {\n        // automatic acknowledgment mode,\n        noAck: true,\n      }\n    );\n    // highlight-end\n  });\n});\n')),(0,r.kt)("h3",{id:"running-them"},"Running them"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=shell_1",title:"shell_1"},"node worker.js\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=shell_2",title:"shell_2"},"node new_task.js\n")),(0,r.kt)("h2",{id:"round-robin-dispatching"},"Round-robin dispatching"),(0,r.kt)("p",null,"One of the advantages of using a Task Queue is the ability to easily parallelise work."),(0,r.kt)("p",null,"If we are building up a backlog of work, we can just add more workers and that way, scale easily."),(0,r.kt)("p",null,"First, let's try to run ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," two ")," ",(0,r.kt)("inlineCode",{parentName:"p"},"worker.js")," scripts at the same time."),(0,r.kt)("p",null,"They will both get messages from the queue, but how exactly? Let's see."),(0,r.kt)("p",null,"You need three shells open. Two will run the ",(0,r.kt)("inlineCode",{parentName:"p"},"worker.js")," script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=shell_1",title:"shell_1"},"node worker.js\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=shell_2",title:"shell_2"},"node new_task.js\n")),(0,r.kt)("p",null,"In the third shell one we'll publish new tasks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=shell_2",title:"shell_2"},"node new_task.js First message.\nnode new_task.js Second message..\nnode new_task.js Third message...\nnode new_task.js Fourth message....\nnode new_task.js Fifth message.....\n")),(0,r.kt)("p",null,"Let's see what is delivered to our workers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:"title=shell_1 showLineNumbers",title:"shell_1",showLineNumbers:!0},"=> [x] Received 'First message.'\n=> [x] Received 'Third message...'\n=> [x] Received 'Fifth message.....'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:"title=shell_2 showLineNumbers",title:"shell_2",showLineNumbers:!0},"=> [x] Received 'Second message..'\n=> [x] Received 'Fourth message....'\n")),(0,r.kt)("p",null,"By default, RabbitMQ will ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," send each message ")," to the ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," next ")," ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," consumer "),",",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," in sequence "),"."),(0,r.kt)("p",null,"On average every consumer will get the ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," same number ")," of messages. This way of distributing messages is called round-robin."),(0,r.kt)("h2",{id:"message-acknowledgment"},"Message acknowledgment"),(0,r.kt)("p",null,"Doing a task can take a few seconds. You may wonder what happens if one of the consumers starts a long task and dies with it only partly done."),(0,r.kt)("p",null,"With our current code, once RabbitMQ delivers a message to the consumer it immediately marks it for deletion."),(0,r.kt)("p",null,"In this case, if you kill a worker we will lose the message it was just processing."),(0,r.kt)("p",null,"We'll also ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," lose all the messages that were dispatched ")," to this particular worker ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," but were not yet handled "),"."),(0,r.kt)("p",null,"In order to make sure a message is never lost, RabbitMQ supports ",(0,r.kt)("a",{parentName:"p",href:"../message-acknowledgment"},"message acknowledgments"),"."),(0,r.kt)("p",null,"An ack(nowledgement) is ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," sent back ")," ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," by the consumer ")," to tell RabbitMQ that a particular message has been received, processed and that RabbitMQ is ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," free to delete the message "),"."),(0,r.kt)("p",null,"If a consumer dies without sending an ack, RabbitMQ will understand that a message wasn't processed fully and will ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," re-queue ")," it."),(0,r.kt)("p",null,"A timeout (30 minutes by default) is enforced on ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," consumer ")," ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," delivery ")," ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," acknowledgement "),".\nThis helps detect buggy (stuck) consumers that never acknowledge deliveries. You can increase this timeout as described in ",(0,r.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/consumers.html#acknowledgement-timeout"},"Delivery Acknowledgement Timeout"),"."),(0,r.kt)("p",null,"Manual consumer acknowledgments have been turned off in previous examples.\nIt's time to turn them on using the ",(0,r.kt)("inlineCode",{parentName:"p"},"{noAck: false}")," option and send a proper acknowledgment from the worker, once we're done with a task."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=worker.js showLineNumbers",title:"worker.js",showLineNumbers:!0},'var amqp = require("amqplib/callback_api");\n\namqp.connect("amqp://localhost", function (error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function (error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var queue = "task_queue";\n\n    // This makes sure the queue is declared before attempting to consume from it\n    channel.assertQueue(queue, {\n      durable: true,\n    });\n\n    // highlight-start\n    channel.consume(\n      queue,\n      function (msg) {\n        var secs = msg.content.toString().split(".").length - 1;\n\n        console.log(" [x] Received %s", msg.content.toString());\n        setTimeout(function () {\n          console.log(" [x] Done");\n          channel.ack(msg);\n        }, secs * 1000);\n      },\n      {\n        // manual acknowledgment mode,\n        noAck: false,\n      }\n    );\n    // highlight-end\n  });\n});\n')),(0,r.kt)(m,{color:"var(--not-require-but-good-to-know-font-color)",mdxType:"Color"},(0,r.kt)("p",null,"Using this code we can be sure that even if you kill a worker using CTRL+C while it was processing a message, nothing will be lost.")),(0,r.kt)(d,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"Acknowledgement ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," must be sent ")," on the ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," same channel ")," ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," that received the delivery "),"."),(0,r.kt)("p",null,"Attempts to acknowledge using a different channel will result in a channel-level protocol exception."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/confirms.html"},"doc guide on confirmations")," to learn more.")),(0,r.kt)("h3",{id:"forgotten-acknowledgment"},"Forgotten acknowledgment"),(0,r.kt)("p",null,"It's a common mistake to miss the ack. It's an easy error, but the consequences are serious."),(0,r.kt)("p",null,"RabbitMQ will eat more and more memory as it won't be able to release any unacked messages."),(0,r.kt)("p",null,"In order to debug this kind of mistake you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmqctl")," to print the ",(0,r.kt)("inlineCode",{parentName:"p"},"messages_unacknowledged")," field:"),(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(k,{value:"linux",label:"linux",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=",title:""},"sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged\n"))),(0,r.kt)(k,{value:"windows",label:"windows",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=",title:""},"rabbitmqctl list_queues name messages_ready messages_unacknowledged\n")))),(0,r.kt)("h2",{id:"message-durability"},"Message durability"),(0,r.kt)("p",null,"When RabbitMQ quits or crashes it will forget the queues and messages unless you tell it not to."),(0,r.kt)("p",null,"Two things are required to make sure that messages aren't lost:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#durable-queue"},"durable queue")," (queue won't be lose when RabbitMQ restart)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#message-persistence"},"message persistence")," (message won't be lose when RabbitMQ restart)")),(0,r.kt)("h3",{id:"durable-queue"},"Durable queue"),(0,r.kt)("p",null,"First, we need to make sure that the ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," queue ")," will ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," survive ")," a RabbitMQ ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," node restart "),"."),(0,r.kt)("p",null,"In order to do so, we need to declare it as durable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=",title:""},'channel.assertQueue("hello", { durable: true });\n')),(0,r.kt)("p",null,"Although this command is correct by itself, it won't work in our present setup. That's because we've already defined a queue called hello which is not durable."),(0,r.kt)("p",null,"\u200b",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"},"RabbitMQ doesn't allow you to redefine an")," ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"},"existing queue with different parameters"),"\nand will return an error to any program that tries to do that."),(0,r.kt)("p",null,"But there is a quick workaround - let's declare a queue with different name, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"task_queue"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=",title:""},'channel.assertQueue("task_queue", { durable: true });\n')),(0,r.kt)(d,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"This ",(0,r.kt)("inlineCode",{parentName:"p"},"durable")," ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," option change needs to be applied ")," to ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," both ")," ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," the producer and consumer ")," code.")),(0,r.kt)("h3",{id:"message-persistence"},"Message persistence"),(0,r.kt)("p",null,"At this point we're sure that the ",(0,r.kt)("inlineCode",{parentName:"p"},"task_queue")," queue won't be lost even if RabbitMQ restarts."),(0,r.kt)("p",null,"Now we need to mark our messages as persistent - by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"persistent")," option ",(0,r.kt)("inlineCode",{parentName:"p"},"Channel.sendToQueue")," takes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=producer.js",title:"producer.js"},"channel.sendToQueue(queue, Buffer.from(msg), { persistent: true });\n")),(0,r.kt)(d,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"Marking messages as persistent doesn't fully guarantee that a message won't be lost."),(0,r.kt)("p",null,"Although ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," it tells RabbitMQ to save the message to disk "),",\nthere is still a short time window when RabbitMQ has accepted a message and hasn't saved it yet."),(0,r.kt)("p",null,"Also, RabbitMQ doesn't do ",(0,r.kt)("inlineCode",{parentName:"p"},"fsync(2)")," for every message -- it may be just saved to cache and not really written to the disk.")),(0,r.kt)(d,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,"The persistence guarantees aren't strong, but it's more than enough for our simple task queue. If you need a stronger guarantee then you can use ",(0,r.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/confirms.html"},"publisher confirms"),".")),(0,r.kt)("h2",{id:"fair-dispatch"},"Fair dispatch"),(0,r.kt)("p",null,"In a situation with two workers, when all odd messages are heavy and even messages are light,\none worker will be constantly busy and the other one will do hardly any work."),(0,r.kt)("p",null,"RabbitMQ doesn't know anything about that and will still dispatch messages evenly."),(0,r.kt)("p",null,"This happens because RabbitMQ just dispatches a message when the message enters the queue. It doesn't look at the number of unacknowledged messages for a consumer."),(0,r.kt)("p",null,"It just blindly dispatches every n-th message to the n-th consumer."),(0,r.kt)("p",null,"In order to defeat that we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"prefetch")," method with the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),". This tells RabbitMQ ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," not to give more than one message to a worker at a time "),".\nIn other words, don't dispatch a new message to a worker until it has processed and acknowledged the previous one."),(0,r.kt)("p",null,"Instead, it will dispatch it to the next worker that is not still busy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=consumer.js",title:"consumer.js"},"channel.prefetch(1);\n")),(0,r.kt)(d,{type:"tip",title:"tip",mdxType:"Admonition"},(0,r.kt)("p",null,"If all the workers are busy, ",(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"}," your queue can fill up "),"."),(0,r.kt)("p",null,"You will want to keep an eye on that, and maybe add more workers, or have some other strategy.")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html"},"https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html"))))}g.isMDXComponent=!0}}]);