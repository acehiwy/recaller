"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[5741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"Iterator",last_update:{date:new Date("2025-09-24T12:08:02.000Z")},tags:["design pattern"]},i=void 0,l={unversionedId:"concept/design-pattern/iterator",id:"concept/design-pattern/iterator",title:"Iterator",description:"Words we will use",source:"@site/docs/concept/design-pattern/iterator.mdx",sourceDirName:"concept/design-pattern",slug:"/concept/design-pattern/iterator",permalink:"/recaller/docs/concept/design-pattern/iterator",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concept/design-pattern/iterator.mdx",tags:[{label:"design pattern",permalink:"/recaller/docs/tags/design-pattern"}],version:"current",lastUpdatedAt:1758715682,formattedLastUpdatedAt:"Sep 24, 2025",frontMatter:{title:"Iterator",last_update:{date:"2025-09-24T12:08:02.000Z"},tags:["design pattern"]},sidebar:"default",previous:{title:"Intro",permalink:"/recaller/docs/intro"},next:{title:"Docusaurus",permalink:"/recaller/docs/framework/docusaurus/"}},s={},c=[{value:"Words we will use",id:"words-we-will-use",level:3},{value:"Description",id:"description",level:2},{value:"Problem without the pattern",id:"problem-without-the-pattern",level:2},{value:"With pattern",id:"with-pattern",level:2},{value:"When to use",id:"when-to-use",level:2},{value:'<Color color="var(--not-nesary-for-now-future-font-color)">Example implementation</Color>',id:"example-implementation",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},m=p("Color"),u=p("Admonition"),d=p("Tabs"),h=p("TabItem"),g={toc:c};function k(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"words-we-will-use"},"Words we will use"),(0,o.kt)("p",null,"collection: is a container for a group of objects. eg, list, stack , tree, graph, etc"),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Iterator pattern let you traverse through ",(0,o.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"},"a")," collection without knowing its traverse implementation ",(0,o.kt)(m,{color:"var(--writer-additional-note-font-color)",mdxType:"Color"},"[","[ internal method for getting a single item and algorithm for tracking which item has already been represented ]","]")),(0,o.kt)("h2",{id:"problem-without-the-pattern"},"Problem without the pattern"),(0,o.kt)("p",null,"When client want to traverse through a collection "),(0,o.kt)("p",null,"They need to"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"know which method they can use to get a single item from the collection "),(0,o.kt)("li",{parentName:"ol"},"keep track of which item they have seen")),(0,o.kt)("p",null,"But each collection provide different method for accessing its item"),(0,o.kt)("p",null,"Eg. an array might provide ",(0,o.kt)("inlineCode",{parentName:"p"},"array.getItem"),". On the other hand a graph provide ",(0,o.kt)("inlineCode",{parentName:"p"},"graph.getNode")),(0,o.kt)("p",null,"Different method of accessing item on different collection add a burden of client to know each collection properties"),(0,o.kt)("p",null,"Also it add more complexity for client if they need to write code for tracking seen items which might lead to code duplication each time they traverse"),(0,o.kt)("h2",{id:"with-pattern"},"With pattern"),(0,o.kt)("p",null,"Iterator pattern introduce ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator")," object which contain traverse algorithm and methods require to traverse"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"interface Iterator<T> {\n  getNextItem(): T;\n  hasMoreItem(): boolean;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getNextItem()")," return an item from collection "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"hasMoreItem()")," check whether they have traversed through all items"),(0,o.kt)("p",null,"The collection then need to return ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator")," object to client by implementing additional method like ",(0,o.kt)("inlineCode",{parentName:"p"},"collection.getIterator")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"  Collection implementation example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=FooCollection.ts showLineNumbers",title:"FooCollection.ts",showLineNumbers:!0},"class FooCollection {\n  // simplified\n  add(){}\n  getItem(){}\n  size(){}\n\n  getIterator(): Iterator<number> {\n    return new EvenItemIterator(this);\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=EvenItemIterator.ts showLineNumbers",title:"EvenItemIterator.ts",showLineNumbers:!0},"class EvenItemIterator implements Iterator<number> {\n  private index = 0;\n\n  // traverse behavior is coupled with a collection\n  constructor(private collection: FooCollection) {}\n\n  getNextItem(): number {\n    if (this.hasMoreItem()) {\n      const result = this.collection.getItem(this.index);\n      this.index += 2\n      return result\n    }\n    \n    throw new Error('no item left')\n  }\n\n  hasMoreItem(): boolean {\n    return this.index < this.collection.size();\n  }\n}\n"))),(0,o.kt)("p",null,"Client then use ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator")," object to traverse"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"const iterator: Iterator = collection.getIterator()\n\nwhile (iterator.hasMoreItem()){\n  const item  = iterator.getNextItem()\n  // do something with item\n}\n")),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator")," interface, client does not need to know which method each collection used for accessing its item. They can just use ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator.getNextItem()")),(0,o.kt)("p",null,"The traverse algorithm and tracking seen item is push to be the collection resposibility. Client can just call ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator.hasMoreItem()")),(0,o.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"Client still need to know which method of the collection is used to return ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator")),(0,o.kt)("p",null,"Some design has all collection implement same interface for returning ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator"),". Eg."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"interface IterableCollection<T>{\n  getIterator(): Iterator<T>\n}\n")),(0,o.kt)("p",null,"So that regardless of collection client is dealing with, they can just call ",(0,o.kt)("inlineCode",{parentName:"p"},"collection.getIterator()")),(0,o.kt)("p",null,"But returning just one ",(0,o.kt)("inlineCode",{parentName:"p"},"iterator")," might not be enough for a certain collection"),(0,o.kt)("p",null,"Eg. a tree collection need depth-first and breadth-first traverse algorithm. It need to have more than one ",(0,o.kt)("inlineCode",{parentName:"p"},"getIterator")," method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"interface Tree{\n  // ...\n  getDepthFirstIterator(): Iterator;\n  getBreadthFirstIterator(): Iterator;\n}\n")),(0,o.kt)("p",null,"In this case, Client still need to know method of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Tree")),(0,o.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"Different kind of ",(0,o.kt)("inlineCode",{parentName:"p"},"tree")," can implement the same ",(0,o.kt)("inlineCode",{parentName:"p"},"Tree")," interface"))),(0,o.kt)(u,{type:"tip",title:"tip",mdxType:"Admonition"},(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/iterator#structure"},"diagrams")," for better understanding")),(0,o.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"One iterator = one traverse behavior ")),(0,o.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"Several iterator can traverse the same collection at the same time")),(0,o.kt)("h2",{id:"when-to-use"},"When to use"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"create a custom data structure"),(0,o.kt)("li",{parentName:"ul"},"adding new / reuse traverse behavior "),(0,o.kt)("li",{parentName:"ul"},"dealing with stream of data with memory constraint"),(0,o.kt)("li",{parentName:"ul"},"lazily compute items in a collection. ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"eg. computing all item at once consume resources. With ",(0,o.kt)("inlineCode",{parentName:"li"},"iterator.getNextItem()")," you compute one item at a time"))),(0,o.kt)("li",{parentName:"ul"},"delay an iteration and continue when needed")),(0,o.kt)("h2",{id:"example-implementation"},(0,o.kt)(m,{color:"var(--not-nesary-for-now-future-font-color)",mdxType:"Color"},"Example implementation")),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(h,{value:"clientCode",label:"Client code",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=client.ts showLineNumbers",title:"client.ts",showLineNumbers:!0},"const collection = new MyCollection()\nconst iterator = collection.getIterator()\nwhile(iterator.hasMoreItem()){\n  const item = iterator.getNextItem()\n}\n\n\nconst tree = Math.random() > 0.5 ? new BinaryTree() : new TrinaryTree()\nconst treeIterator = tree.getDepthFirstIterator()\nwhile(treeIterator.hasMoreItem()){\n  const item = treeIterator.getNextItem()\n}\n"))),(0,o.kt)(h,{value:"interface",label:"Interface",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=interface.ts showLineNumbers",title:"interface.ts",showLineNumbers:!0},"interface _Iterator<T> {\n  getNextItem(): T;\n  hasMoreItem(): boolean;\n}\n\ninterface IterableCollection<T>{\n  getIterator(): _Iterator<T>\n}\n\ninterface IterableTreeCollection<T>{\n  getDepthFirstIterator(): _Iterator<T>;\n  getBreadthFirstIterator(): _Iterator<T>;\n}\n\ninterface NormalCollection {\n  getItem(...args: any[]): any\n  size(): any\n}\n\ninterface Tree {\n  // ...\n}\n"))),(0,o.kt)(h,{value:"mycollection",label:"EvenItemIterator",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=EvenItemIterator.ts showLineNumbers",title:"EvenItemIterator.ts",showLineNumbers:!0},"class EvenItemIterator implements _Iterator<number> {\n  private index = 0;\n\n  constructor(private collection: NormalCollection) {}\n\n  getNextItem(): number {\n    if (this.hasMoreItem()) {\n      const result = this.collection.getItem(this.index);\n      this.index += 2\n      return result\n    }\n    \n    throw new Error('no item left')\n  }\n\n  hasMoreItem(): boolean {\n    return this.index < this.collection.size();\n  }\n}\n\nclass MyCollection implements NormalCollection, IterableCollection<number>{\n  getItem(){}\n  size(){}\n\n  getIterator(): _Iterator<number> {\n    return new EvenItemIterator(this)\n  }\n}\n"))),(0,o.kt)(h,{value:"tree",label:"TreeIterator",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=TreeIterator.ts showLineNumbers",title:"TreeIterator.ts",showLineNumbers:!0},"class TreeIterator implements _Iterator<number>{\n  constructor(private tree: Tree){}\n\n  getNextItem(): number {\n    // ...\n  }\n  hasMoreItem(): boolean {\n    // ...\n  }\n}\n\nclass BinaryTree implements Tree, IterableTreeCollection<number>{\n  getDepthFirstIterator(): _Iterator<number> {\n    // ...\n  }\n  getBreadthFirstIterator(): _Iterator<number> {\n    // ...\n  }\n}\n\nclass TrinaryTree implements Tree, IterableTreeCollection<number>{\n  getDepthFirstIterator(): _Iterator<number> {\n    // ...\n  }\n  getBreadthFirstIterator(): _Iterator<number> {\n    // ...\n  }\n}\n")))),(0,o.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"See more ",(0,o.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns/iterator#implementations"},"code example")," from ",(0,o.kt)("a",{parentName:"p",href:"https://refactoring.guru/"},"refactoring.guru"))),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"sources"},"Sources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://refactoring.guru/design-patterns/iterator"},"https://refactoring.guru/design-patterns/iterator"))))}k.isMDXComponent=!0}}]);