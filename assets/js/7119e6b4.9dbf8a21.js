"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[1752],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=i.createContext({}),s=function(e){var t=i.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=o,_=d["".concat(m,".").concat(c)]||d[c]||u[c]||a;return n?i.createElement(_,r(r({ref:t},p),{},{components:n})):i.createElement(_,r({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<a;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1e4,tags:["python"]},r="Modules",l={unversionedId:"language/python/modules",id:"language/python/modules",title:"Modules",description:"A modules is a file containing variables, statements and functions.",source:"@site/docs/language/python/modules.mdx",sourceDirName:"language/python",slug:"/language/python/modules",permalink:"/recaller/docs/language/python/modules",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/modules.mdx",tags:[{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1759074662,formattedLastUpdatedAt:"Sep 28, 2025",sidebarPosition:1e4,frontMatter:{sidebar_position:1e4,tags:["python"]},sidebar:"default",previous:{title:"Working with file",permalink:"/recaller/docs/language/python/input-output"},next:{title:"note",permalink:"/recaller/docs/language/python/note"}},m={},s=[{value:"Import definitions from a module",id:"import-definitions-from-a-module",level:2},{value:"Import all definitions",id:"import-all-definitions",level:3},{value:"Module initialization",id:"module-initialization",level:2},{value:'<Color color="var(--not-nesary-for-now-future-font-color)"> Re-importing module </Color>',id:"-re-importing-module-",level:3},{value:"Executing modules as scripts",id:"executing-modules-as-scripts",level:2},{value:"Run something only when executed as a script",id:"run-something-only-when-executed-as-a-script",level:3},{value:"Module search path",id:"module-search-path",level:2},{value:"<code>dir</code> function",id:"dir-function",level:2},{value:"Packages",id:"packages",level:2},{value:"Importing <code>*</code> from package",id:"importing--from-package",level:3},{value:"Relative import",id:"relative-import",level:3}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=p("Tabs"),d=p("TabItem"),c=p("Admonition"),_=p("Color"),f={toc:s};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"modules"},"Modules"),(0,o.kt)("p",null,"A modules is a file containing variables, statements and functions. "),(0,o.kt)("p",null,"A file name is a module name"),(0,o.kt)("p",null,"Eg. from the same directory:"),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(d,{value:"some_other_file",label:"some_other_file.py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=some_other_file.py showLineNumbers",title:"some_other_file.py",showLineNumbers:!0},"import my_module\n\nprint(my_module.__name___)\n# my_module\nprint(my_module.foo())\n# foo\nprint(__name__)\n# some_other_file\n")),(0,o.kt)(c,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"Within a module, the module's name (as string) is available as a value of global variable ",(0,o.kt)("inlineCode",{parentName:"p"},"__name__")))),(0,o.kt)(d,{value:"my_module",label:"my_module.py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=my_module.py showLineNumbers",title:"my_module.py",showLineNumbers:!0},"def foo():\n  return 'foo'\n")))),(0,o.kt)("h2",{id:"import-definitions-from-a-module"},"Import definitions from a module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=main.py showLineNumbers",title:"main.py",showLineNumbers:!0},"from my_module import foo, bar as something_else\n\nfoo()\nsomething_else()\n")),(0,o.kt)("h3",{id:"import-all-definitions"},"Import all definitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=main.py showLineNumbers",title:"main.py",showLineNumbers:!0},"from my_module import * # not recommended\n\nfoo()\nsomething_else()\n\n\n# use this style instead\nimport my_module as something\n\nsomething.foo()\nsomething.something_else()\n")),(0,o.kt)("h2",{id:"module-initialization"},"Module initialization"),(0,o.kt)("p",null,"Each module is only ",(0,o.kt)(_,{color:"var(--secondary-font-color)",mdxType:"Color"}," imported once per interpreter session "),". Meaning, statements define in module are executed once on imported whether one or multiple file importing it."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(d,{value:"main",label:"main",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=main.py showLineNumbers",title:"main.py",showLineNumbers:!0},"print('init:' , __name__)\n\nimport deepest_module\nimport middle_module\n\nprint('exec from', __name__ , deepest_module.deepest())\n# init: __main__\n# init: deepest_module\n# init: middle_module\n# exec from middle_module deepest\n# exec from __main__ deepest\n"))),(0,o.kt)(d,{value:"middle",label:"middle module",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=middle_module.py showLineNumbers",title:"middle_module.py",showLineNumbers:!0},"print('init:' , __name__)\n\nimport deepest_module\n\nprint('exec from', __name__ , deepest_module.deepest())\n"))),(0,o.kt)(d,{value:"deepest",label:"deepest module",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=deepest_module.py showLineNumbers",title:"deepest_module.py",showLineNumbers:!0},"print('init:' , __name__)\n\ndef deepest():\n  return 'deepest'\n")))),(0,o.kt)("h3",{id:"-re-importing-module-"},(0,o.kt)(_,{color:"var(--not-nesary-for-now-future-font-color)",mdxType:"Color"}," Re-importing module ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"import importlib\n\nimportlib.reload(modulename)\n")),(0,o.kt)("h2",{id:"executing-modules-as-scripts"},"Executing modules as scripts"),(0,o.kt)("p",null,"When Python executing a module file, its module name, ",(0,o.kt)("inlineCode",{parentName:"p"},"__name__"),", will be replace with string ",(0,o.kt)("inlineCode",{parentName:"p"},"__main__"),"."),(0,o.kt)("p",null,"Eg. from this module file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=my_module.py showLineNumbers",title:"my_module.py",showLineNumbers:!0},"print('init:', __name__)\n")),(0,o.kt)("p",null,"If executed as a script, ",(0,o.kt)("inlineCode",{parentName:"p"},"python my_module.py"),". The output will be ",(0,o.kt)("inlineCode",{parentName:"p"},"init: __main__")),(0,o.kt)("p",null,"If imported by another file. The output will be output: ",(0,o.kt)("inlineCode",{parentName:"p"},"init: my_module")),(0,o.kt)("h3",{id:"run-something-only-when-executed-as-a-script"},"Run something only when executed as a script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=my_module.py showLineNumbers",title:"my_module.py",showLineNumbers:!0},"def foo():\n  return 'foo'\n\ndef bar():\n  return 'bar'\n\nprint('this string will be printed every time whether this file is imported or executed as a script')\n\nif __name__ == '__main__':\n  # the code inside this if will run only if this file executed as a script\n  # not run on import statement (import my_module)\n  foo()\n  bar()\n")),(0,o.kt)("h2",{id:"module-search-path"},"Module search path"),(0,o.kt)("p",null,"Lets say module ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," is imported, the interpreter start search from:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"build-in module name ",(0,o.kt)("inlineCode",{parentName:"li"},"foo"),". ",(0,o.kt)(_,{color:"var(--not-require-but-good-to-know-font-color)",mdxType:"Color"}," build-in module are listed in ",(0,o.kt)("inlineCode",{parentName:"li"},"sys.builtin_module_names")," ")),(0,o.kt)("li",{parentName:"ul"},"a file named ",(0,o.kt)("inlineCode",{parentName:"li"},"foo.py")," from a list of dictionaries given by ",(0,o.kt)("inlineCode",{parentName:"li"},"sys.path")," which are:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"the directory containing the input script (current dir if no file input)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PYTHONPATH")," environment variable"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(_,{color:"var(--can-not-understand-font-color)",mdxType:"Color"}," installation-dependent default "))))),(0,o.kt)(c,{type:"note",title:"note",mdxType:"Admonition"},(0,o.kt)("p",null,"if the input script is symlinked. The intrepreter will add the original file location to the search path, ",(0,o.kt)(_,{color:"var(--secondary-font-color)",mdxType:"Color"}," not symliked file directory "),".")),(0,o.kt)("details",null,(0,o.kt)("summary",null," `sys.path` example "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"[\n    '', # directory containing the script being run\n    '/usr/local/lib/python313.zip', \n    '/usr/local/lib/python3.13', \n    '/usr/local/lib/python3.13/lib-dynload', \n    '/usr/local/lib/python3.13/site-packages'\n]\n"))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"dir-function"},(0,o.kt)("inlineCode",{parentName:"h2"},"dir")," function"),(0,o.kt)("p",null,"give u a list of definitions name (variables, modules, functions) which a certain module contain."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(d,{value:"main",label:"main.py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"import foo\n\ndef f1():\n  return 'f1'\n\nmain_var = 'main'\n\nprint(dir(foo))\n# [\n# highlight-start\n#   'foo',\n#   'sys',\n#   'variable_from_foo',\n# highlight-end\n#   '__builtins__',\n#   '__cached__',\n#   '__doc__',\n#   '__file__',\n#   '__loader__',\n#   '__name__',\n#   '__package__',\n#   '__spec__',\n# ]\n"))),(0,o.kt)(d,{value:"foo",label:"foo.py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'import sys\n\ndef foo():\n  pass\n\nvariable_from_foo = "foo"\n')))),(0,o.kt)("p",null,"calling ",(0,o.kt)("inlineCode",{parentName:"p"},"dir")," without any argument give u a list of a current module."),(0,o.kt)("p",null,"eg. ",(0,o.kt)("inlineCode",{parentName:"p"},"dir()")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"main.py")," file above will give:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"[\n  # highlight-start\n  'f1',\n  'foo',\n  'main_var',\n  # highlight-end\n  '__annotations__',\n  '__builtins__',\n  '__doc__',\n  '__loader__',\n  '__name__',\n  '__package__',\n  '__spec__',\n  \n]\n")),(0,o.kt)(c,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,"Built-in definitions can be listed by ",(0,o.kt)("inlineCode",{parentName:"p"},"import builtins; dir(builtins)"))),(0,o.kt)("h2",{id:"packages"},"Packages"),(0,o.kt)("p",null,"Package is a collection of modules"),(0,o.kt)("p",null,"With these file structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"sound/                          Top-level package\n      __init__.py               Initialize the sound package\n      formats/                  Subpackage for file format conversions\n              __init__.py\n              wavread.py\n              wavwrite.py\n")),(0,o.kt)("p",null,"User then can use these module and it sub-module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"import sound\nimport sound.formats\nimport sound.formats.wavread\nfrom sound.formats.wavread import some_definition_inside_wavread\n")),(0,o.kt)(c,{type:"info",title:"info",mdxType:"Admonition"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"__init__.py")," make its directory a module using definitions inside ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__.py")," file "),(0,o.kt)("p",null,"eg. the ",(0,o.kt)("inlineCode",{parentName:"p"},"import sound")," statement would import definitions from a file ",(0,o.kt)("inlineCode",{parentName:"p"},"sound.py")," or  ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__.py")," which live inside ",(0,o.kt)("inlineCode",{parentName:"p"},"sound")," directory")),(0,o.kt)(c,{type:"tip",title:"later",mdxType:"Admonition"},(0,o.kt)("p",null,"When using syntax like ",(0,o.kt)("inlineCode",{parentName:"p"},"import item.subitem.subsubitem"),", each item except for the last must be a package."),(0,o.kt)("p",null,"The last item can be a module or a package but can't be a class or function or variable defined in the previous item.")),(0,o.kt)("h3",{id:"importing--from-package"},"Importing ",(0,o.kt)("inlineCode",{parentName:"h3"},"*")," from package"),(0,o.kt)("p",null,"The statement ",(0,o.kt)("inlineCode",{parentName:"p"},"from sound.formats import *")," only import definitions defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"formats")," module. It is not import ",(0,o.kt)("inlineCode",{parentName:"p"},"formats")," submodule (",(0,o.kt)("inlineCode",{parentName:"p"},"waveread")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"wavwrite"),")."),(0,o.kt)("p",null,"If you want submodules to be included, you have to add submodules' name in side ",(0,o.kt)("inlineCode",{parentName:"p"},"__all__")," global variable of a module's ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__")," file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=formats/__init__.py showLineNumbers",title:"formats/__init__.py",showLineNumbers:!0},"__all__ = [\n  'waveread',\n  'wavewrite'\n]\n")),(0,o.kt)("h3",{id:"relative-import"},"Relative import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"from . import foo # from current module directory, import foo\nfrom .. import bar # move out from current module directory 1 level, import bar\nfrom ... import bar # move out from current module directory 2 level, import bar\nfrom ..other_dir import baz # move out from current module directory 1 level then goes in other_dir directory, import baz\n")),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"sources"},"Sources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/modules.html"},"https://docs.python.org/3/tutorial/modules.html"))))}h.isMDXComponent=!0}}]);