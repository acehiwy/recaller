"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[5250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={last_update:{date:new Date("2025-10-01T13:56:30.747Z")},tags:["python"]},i="Control Flow",l={unversionedId:"language/python/control-flow/index",id:"language/python/control-flow/index",title:"Control Flow",description:"if statement",source:"@site/docs/language/python/2_control-flow/index.mdx",sourceDirName:"language/python/2_control-flow",slug:"/language/python/control-flow/",permalink:"/recaller/docs/language/python/control-flow/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/2_control-flow/index.mdx",tags:[{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1759326990.747,formattedLastUpdatedAt:"Oct 1, 2025",frontMatter:{last_update:{date:"2025-10-01T13:56:30.747Z"},tags:["python"]},sidebar:"default",previous:{title:"String",permalink:"/recaller/docs/language/python/string"},next:{title:"match statement",permalink:"/recaller/docs/language/python/control-flow/match-statement"}},s={},p=[{value:"<code>if</code> statement",id:"if-statement",level:2},{value:"Compare whether 2 object the same",id:"compare-whether-2-object-the-same",level:3},{value:"Chain comparison",id:"chain-comparison",level:3},{value:"Comparing sequences object",id:"comparing-sequences-object",level:3},{value:"<code>pass</code> statement",id:"pass-statement",level:2}],c=(m="Admonition",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"control-flow"},"Control Flow"),(0,r.kt)("h2",{id:"if-statement"},(0,r.kt)("inlineCode",{parentName:"h2"},"if")," statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"if x < 0:\n    print('foo')\nelif not x == 0:\n    print('bar')\nelif x != 1 or x != 2 and x != 3:\n    print('baz')\nelse:\n    print('default')\n")),(0,r.kt)("h3",{id:"compare-whether-2-object-the-same"},"Compare whether 2 object the same"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"if object_1 is object_2:\n  pass\nelif object_1 is not object_2:\n  pass\nelif object_1 is not None:\n  pass\n")),(0,r.kt)("h3",{id:"chain-comparison"},"Chain comparison"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"if 1 < 2 == 2 > 0 or SomeObject.hasSomething() :\n  pass\n\n# equivalent to \nif 1 < 2 and 2 == 2 and 2 > 0 or SomeObject.hasSomething() :\n  pass\n")),(0,r.kt)("h3",{id:"comparing-sequences-object"},"Comparing sequences object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'"somestring" > "other string"\n\n(1,2,5) >= (5,6,7,8)\n\n["3" ,555] > ["2"]\n')),(0,r.kt)("p",null,"The first two items are compared, and if they are different this determines the outcome of the comparison "),(0,r.kt)("p",null,"If they are equal, the next two items are compared, and so on "),(0,r.kt)(c,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"Comparing two string uses the Unicode code point number to order individual characters."),(0,r.kt)("p",null,"eg:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"b > a")," because unicode point of ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0062")," but ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0061"),", so ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," is more than ",(0,r.kt)("inlineCode",{parentName:"li"},"a")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a > B")," because unicode point of ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0061")," but ",(0,r.kt)("inlineCode",{parentName:"li"},"B")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0042"),", so ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," is more than ",(0,r.kt)("inlineCode",{parentName:"li"},"B")))),(0,r.kt)(c,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,"More info on ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/expressions.html#operator-precedence"},"operator precedence"))),(0,r.kt)("h2",{id:"pass-statement"},(0,r.kt)("inlineCode",{parentName:"h2"},"pass")," statement"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pass")," act like empty code block"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"class MyEmptyClass:\n  pass\n\nwhile True:\n  pass\n\ndef initlog(*args):\n  pass \n\nif True:\n  pass\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/controlflow.html"},"https://docs.python.org/3/tutorial/controlflow.html"))))}d.isMDXComponent=!0}}]);