"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[9925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(g,l(l({ref:t},p),{},{components:n})):o.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var c=2;c<i;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7297:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:6e3,tags:["rabbitmq"]},l="Topics",a={unversionedId:"tool/rabbitmq/tutorial/topic",id:"tool/rabbitmq/tutorial/topic",title:"Topics",description:"Although using the direct exchange improved our system, it still has limitations - it can't do routing based on  multiple criteria .",source:"@site/docs/tool/rabbitmq/tutorial/topic.mdx",sourceDirName:"tool/rabbitmq/tutorial",slug:"/tool/rabbitmq/tutorial/topic",permalink:"/recaller/docs/tool/rabbitmq/tutorial/topic",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tool/rabbitmq/tutorial/topic.mdx",tags:[{label:"rabbitmq",permalink:"/recaller/docs/tags/rabbitmq"}],version:"current",sidebarPosition:6e3,frontMatter:{sidebar_position:6e3,tags:["rabbitmq"]},sidebar:"default",previous:{title:"Routing",permalink:"/recaller/docs/tool/rabbitmq/tutorial/routing"},next:{title:"Message Acknowledgment",permalink:"/recaller/docs/tool/rabbitmq/message-acknowledgment"}},s={},c=[{value:"Topic exchange",id:"topic-exchange",level:2},{value:"Example",id:"example",level:2},{value:"Code Example",id:"code-example",level:2},{value:"Publisher",id:"publisher",level:3},{value:"Subscriber",id:"subscriber",level:3},{value:"Running",id:"running",level:3},{value:"Receive all logs",id:"receive-all-logs",level:4},{value:"To receive all logs from the facility <code>kern</code>:",id:"to-receive-all-logs-from-the-facility-kern",level:4},{value:"To receive all <code>critical</code> logs:",id:"to-receive-all-critical-logs",level:4},{value:"Subscriber with multiple bindings:",id:"subscriber-with-multiple-bindings",level:4},{value:"Publisher with routing key <code>kern.critical</code>:",id:"publisher-with-routing-key-kerncritical",level:4}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=p("Color"),d=p("Admonition"),m={toc:c};function g(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"topics"},"Topics"),(0,r.kt)("p",null,"Although using the direct exchange improved our system, it still has limitations - it can't do routing based on ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," multiple criteria "),"."),(0,r.kt)("p",null,"In our logging system we might want to subscribe to not only logs based on severity, but also ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," based on the source which emitted ")," the log."),(0,r.kt)("h2",{id:"topic-exchange"},"Topic exchange"),(0,r.kt)("p",null,"Messages sent to a topic exchange can't have an arbitrary ",(0,r.kt)("inlineCode",{parentName:"p"},"routing_key")," - it ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," must be a list of words, delimited by dots "),"."),(0,r.kt)(d,{type:"info",title:"//\\\\",icon:"",mdxType:"Admonition"},(0,r.kt)("p",null,"Topic exchange is direct exchange with special format of routing key and binding key.")),(0,r.kt)("p",null,"The words can be anything, but usually they specify some features connected to the message."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stock.usd.nyse")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nyse.vmw")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"quick.orange.rabbit"))),(0,r.kt)(d,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"There can be as many words in the routing key as you like, up to the limit of 255 bytes.")),(0,r.kt)(d,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"The binding key must also be in the same form.")),(0,r.kt)("p",null,"The logic behind the topic exchange is similar to a direct one - a message sent with a particular routing key will be delivered to all the queues that are bound with a matching binding key."),(0,r.kt)("p",null,"However there are two important special cases for ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," binding keys "),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*")," (star) can substitute for exactly one word."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"#")," (hash) can substitute for zero or more words.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"topic",src:n(2834).Z,width:"424",height:"171"})),(0,r.kt)("p",null,"In this example, we're going to send messages which all describe animals."),(0,r.kt)("p",null,"The messages will be sent with a routing key that consists of three words (two dots)."),(0,r.kt)("p",null,"The first word in the routing key will describe speed, second a colour and third a species: ",(0,r.kt)("inlineCode",{parentName:"p"},"<speed>.<colour>.<species>"),"."),(0,r.kt)("p",null,"We created three bindings: ",(0,r.kt)("inlineCode",{parentName:"p"},"Q1")," is bound with binding key ",(0,r.kt)("inlineCode",{parentName:"p"},"*.orange.*")," and Q2 with ",(0,r.kt)("inlineCode",{parentName:"p"},"*.*.rabbit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy.#"),"."),(0,r.kt)("p",null,"These bindings can be summarised as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Q1")," is interested in all the ",(0,r.kt)("inlineCode",{parentName:"li"},"orange")," animals."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Q2")," wants to hear everything about ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbits"),", and everything about ",(0,r.kt)("inlineCode",{parentName:"li"},"lazy")," animals.")),(0,r.kt)("p",null,"A message with a ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," routing key ")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"quick.orange.rabbit")," will be delivered to both queues."),(0,r.kt)("p",null,"Message ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy.orange.elephant")," also will go to both of them."),(0,r.kt)("p",null,"On the other hand ",(0,r.kt)("inlineCode",{parentName:"p"},"quick.orange.fox")," will ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," only ")," go to the first queue, and ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy.brown.fox")," ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," only ")," to the second."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lazy.pink.rabbit")," will be delivered to the second queue ",(0,r.kt)(u,{color:"var(--primary-font-color)",mdxType:"Color"}," only once "),", even though ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," it matches two bindings "),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"quick.brown.fox")," ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," doesn't match any binding ")," so it will be ",(0,r.kt)(u,{color:"var(--primary-font-color)",mdxType:"Color"}," discarded "),"."),(0,r.kt)("p",null,"What happens if we break our contract and send a message with one or four words, like ",(0,r.kt)("inlineCode",{parentName:"p"},"orange")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"quick.orange.male.rabbit"),"? Well, these ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," messages won't match any bindings ")," and ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," will be lost "),"."),(0,r.kt)("p",null,"On the other hand ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy.orange.male.rabbit"),", even though it has four words, will ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," match the last binding ")," ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy.#")," and will be ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," delivered to the second queue "),"."),(0,r.kt)(d,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"When a queue is bound with ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," (hash) binding key - it will ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," receive all the messages "),", regardless of the routing key - like in fanout exchange.")),(0,r.kt)(d,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"When special characters ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," (star) and ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," (hash) ",(0,r.kt)(u,{color:"var(--secondary-font-color)",mdxType:"Color"}," aren't used ")," ",(0,r.kt)(u,{color:"var(--primary-font-color)",mdxType:"Color"}," in bindings "),", the topic exchange will behave just like a direct exchange.")),(0,r.kt)("h2",{id:"code-example"},"Code Example"),(0,r.kt)("p",null,"We're going to use a topic exchange in our logging system."),(0,r.kt)("p",null,"We'll start off with a working assumption that the routing keys of logs will have two words: ",(0,r.kt)("inlineCode",{parentName:"p"},"<facility>.<severity>"),"."),(0,r.kt)("h3",{id:"publisher"},"Publisher"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=emit_log_topic.js showLineNumbers",title:"emit_log_topic.js",showLineNumbers:!0},'var amqp = require("amqplib/callback_api");\n\namqp.connect("amqp://localhost", function (error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function (error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = "topic_logs";\n    var args = process.argv.slice(2);\n    var key = args.length > 0 ? args[0] : "anonymous.info";\n    var msg = args.slice(1).join(" ") || "Hello World!";\n\n    channel.assertExchange(exchange, "topic", {\n      durable: false,\n    });\n    channel.publish(exchange, key, Buffer.from(msg));\n    console.log(" [x] Sent %s:\'%s\'", key, msg);\n  });\n\n  setTimeout(function () {\n    connection.close();\n    process.exit(0);\n  }, 500);\n});\n')),(0,r.kt)("h3",{id:"subscriber"},"Subscriber"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=receive_logs_topic.js showLineNumbers",title:"receive_logs_topic.js",showLineNumbers:!0},'var amqp = require("amqplib/callback_api");\n\nvar args = process.argv.slice(2);\n\nif (args.length == 0) {\n  console.log("Usage: receive_logs_topic.js <facility>.<severity>");\n  process.exit(1);\n}\n\namqp.connect("amqp://localhost", function (error0, connection) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel(function (error1, channel) {\n    if (error1) {\n      throw error1;\n    }\n    var exchange = "topic_logs";\n\n    channel.assertExchange(exchange, "topic", {\n      durable: false,\n    });\n\n    channel.assertQueue(\n      "",\n      {\n        exclusive: true,\n      },\n      function (error2, q) {\n        if (error2) {\n          throw error2;\n        }\n        console.log(" [*] Waiting for logs. To exit press CTRL+C");\n\n        // highlight-start\n        args.forEach(function (key) {\n          // $ node emit_log_topic.js "kern.critical" "A critical kernel error"\n          // key is routing key ("kern.critical" , "A critical kernel error" )\n          channel.bindQueue(q.queue, exchange, key);\n        });\n        // highlight-end\n\n        channel.consume(\n          q.queue,\n          function (msg) {\n            console.log(\n              " [x] %s:\'%s\'",\n              msg.fields.routingKey,\n              msg.content.toString()\n            );\n          },\n          {\n            noAck: true,\n          }\n        );\n      }\n    );\n  });\n});\n')),(0,r.kt)("h3",{id:"running"},"Running"),(0,r.kt)("h4",{id:"receive-all-logs"},"Receive all logs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=",title:""},"node receive_logs_topic.js '#'\n")),(0,r.kt)("h4",{id:"to-receive-all-logs-from-the-facility-kern"},"To receive all logs from the facility ",(0,r.kt)("inlineCode",{parentName:"h4"},"kern"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=",title:""},"node receive_logs_topic.js 'kern.*'\n")),(0,r.kt)("h4",{id:"to-receive-all-critical-logs"},"To receive all ",(0,r.kt)("inlineCode",{parentName:"h4"},"critical")," logs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=",title:""},"node receive_logs_topic.js '*.critical'\n")),(0,r.kt)("h4",{id:"subscriber-with-multiple-bindings"},"Subscriber with multiple bindings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=",title:""},"node receive_logs_topic.js 'kern.*' '*.critical'\n")),(0,r.kt)("h4",{id:"publisher-with-routing-key-kerncritical"},"Publisher with routing key ",(0,r.kt)("inlineCode",{parentName:"h4"},"kern.critical"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=",title:""},'node emit_log_topic.js "kern.critical" "A critical kernel error"\n')),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/tutorials/tutorial-five-javascript.html"},"https://www.rabbitmq.com/tutorials/tutorial-five-javascript.html"))))}g.isMDXComponent=!0},2834:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/topic-42656ce58cee151e904597709b8ff882.png"}}]);