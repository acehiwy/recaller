"use strict";(self.webpackChunkwoof=self.webpackChunkwoof||[]).push([[2370],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>m});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(o),m=n,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return o?r.createElement(b,i(i({ref:t},c),{},{components:o})):r.createElement(b,i({ref:t},c))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var u=2;u<a;u++)i[u]=o[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},1782:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=o(7462),n=(o(7294),o(3905));const a={tags:["rabbitmq","tool"]},i="Rabbitmq",l={unversionedId:"tool/rabbitmq/index",id:"tool/rabbitmq/index",title:"Rabbitmq",description:"Introduction",source:"@site/docs/tool/rabbitmq/index.mdx",sourceDirName:"tool/rabbitmq",slug:"/tool/rabbitmq/",permalink:"/woof/docs/tool/rabbitmq/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tool/rabbitmq/index.mdx",tags:[{label:"rabbitmq",permalink:"/woof/docs/tags/rabbitmq"},{label:"tool",permalink:"/woof/docs/tags/tool"}],version:"current",frontMatter:{tags:["rabbitmq","tool"]},sidebar:"default",previous:{title:"Studying",permalink:"/woof/docs/tool/anki/studying"},next:{title:"Hello World",permalink:"/woof/docs/tool/rabbitmq/tutorial/hello-world"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Producer",id:"producer",level:2},{value:"Queue",id:"queue",level:2},{value:"Consumer",id:"consumer",level:2}],c=(p="Color",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",e)});var p;const d={toc:u};function m(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"rabbitmq"},"Rabbitmq"),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"RabbitMQ is a message broker: it ",(0,n.kt)(c,{color:"var(--secondary-font-color)",mdxType:"Color"}," accepts and forwards ")," messages."),(0,n.kt)(c,{color:"var(--not-require-but-good-to-know-font-color)",mdxType:"Color"},(0,n.kt)("p",null,"You can think about it as a post office: when you put the mail that you want posting\nin a post box, you can be sure that the letter carrier will eventually deliver\nthe mail to your recipient. In this analogy, RabbitMQ is a post box, a post office,\nand a letter carrier.")),(0,n.kt)("p",null,"RabbitMQ accepts, stores, and forwards binary blobs of data - messages."),(0,n.kt)("h2",{id:"producer"},"Producer"),(0,n.kt)("p",null,"Producing means nothing more than sending. A program that sends messages is a ",(0,n.kt)(c,{color:"var(--secondary-font-color)",mdxType:"Color"}," producer "),"."),(0,n.kt)("h2",{id:"queue"},"Queue"),(0,n.kt)("p",null,"A queue is the name for a post box which lives inside RabbitMQ."),(0,n.kt)("p",null,"Although messages flow through RabbitMQ and your applications,they can only be stored inside a queue."),(0,n.kt)("p",null,"A queue is only bound by the host's memory & disk limits, it's essentially a large message buffer."),(0,n.kt)("p",null,"Many producers can send messages that go to one queue, and many consumers can try to receive data from one queue. This is how we represent a queue"),(0,n.kt)("h2",{id:"consumer"},"Consumer"),(0,n.kt)("p",null,"Consuming has a similar meaning to receiving. A consumer is a program that mostly waits to receive messages."))}m.isMDXComponent=!0}}]);