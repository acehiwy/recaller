"use strict";(self.webpackChunkrecaller=self.webpackChunkrecaller||[]).push([[5965],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7200:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={tags:["python"]},i="Control Flow",l={unversionedId:"language/python/control-flow/index",id:"language/python/control-flow/index",title:"Control Flow",description:"if statement",source:"@site/docs/language/python/control-flow/index.mdx",sourceDirName:"language/python/control-flow",slug:"/language/python/control-flow/",permalink:"/recaller/docs/language/python/control-flow/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/language/python/control-flow/index.mdx",tags:[{label:"python",permalink:"/recaller/docs/tags/python"}],version:"current",lastUpdatedAt:1759074662,formattedLastUpdatedAt:"Sep 28, 2025",frontMatter:{tags:["python"]},sidebar:"default",previous:{title:"with statement",permalink:"/recaller/docs/language/python/with-statement"},next:{title:"match statement",permalink:"/recaller/docs/language/python/control-flow/match-statement"}},s={},p=[{value:"<code>if</code> statement",id:"if-statement",level:2},{value:"Compare whether 2 object the same",id:"compare-whether-2-object-the-same",level:3},{value:"Chain comparison",id:"chain-comparison",level:3},{value:"Comparing sequences object",id:"comparing-sequences-object",level:3},{value:"Loop",id:"loop",level:2},{value:"loop on collection",id:"loop-on-collection",level:3},{value:"<code>break</code> and <code>continue</code>",id:"break-and-continue",level:3},{value:"<code>else</code> on Loop",id:"else-on-loop",level:3},{value:"<code>pass</code> statement",id:"pass-statement",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=c("Color"),u=c("Admonition"),d={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"control-flow"},"Control Flow"),(0,r.kt)("h2",{id:"if-statement"},(0,r.kt)("inlineCode",{parentName:"h2"},"if")," statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"if x < 0:\n    print('foo')\nelif not x == 0:\n    print('bar')\nelif x != 1 or x != 2 and x != 3:\n    print('baz')\nelse:\n    print('default')\n")),(0,r.kt)("h3",{id:"compare-whether-2-object-the-same"},"Compare whether 2 object the same"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"if object_1 is object_2:\n  pass\nelif object_1 is not object_2:\n  pass\nelif object_1 is not None:\n  pass\n")),(0,r.kt)("h3",{id:"chain-comparison"},"Chain comparison"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"if 1 < 2 == 2 > 0 or SomeObject.hasSomething() :\n  pass\n\n# equivalent to \nif 1 < 2 and 2 == 2 and 2 > 0 or SomeObject.hasSomething() :\n  pass\n")),(0,r.kt)("h3",{id:"comparing-sequences-object"},"Comparing sequences object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'"somestring" > "other string"\n\n(1,2,5) >= (5,6,7,8)\n\n["3" ,555] > ["2"]\n')),(0,r.kt)(m,{color:"var(--secondary-font-color)",mdxType:"Color"},(0,r.kt)("p",null,"First the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on ")),(0,r.kt)(u,{type:"note",title:"note",mdxType:"Admonition"},(0,r.kt)("p",null,"Comparing two string uses the Unicode code point number to order individual characters."),(0,r.kt)("p",null,"eg:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"b > a")," because unicode point of ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0062")," but ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0061"),", so ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," is more than ",(0,r.kt)("inlineCode",{parentName:"li"},"a")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a > B")," because unicode point of ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0061")," but ",(0,r.kt)("inlineCode",{parentName:"li"},"B")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0042"),", so ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," is more than ",(0,r.kt)("inlineCode",{parentName:"li"},"B")))),(0,r.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,"More info on ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/expressions.html#operator-precedence"},"operator precedence"))),(0,r.kt)("h2",{id:"loop"},"Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"for i in range(5): # or range(2,5) -> 2,3,4\n    print(i)\n\n# 0\n# 1\n# 2\n# 3\n# 4\n")),(0,r.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"range()")," function return ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/glossary.html#term-iterable"},"iterable"))),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"words = ['cat', 'window', 'defenestrate']\nfor w in words:\n    print(w, len(w))\n")),(0,r.kt)("p",null,"get list's index inside loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"words = ['cat', 'window', 'defenestrate']\nfor index, value in enumerate(words):\n    print(index, value)\n")),(0,r.kt)("h3",{id:"loop-on-collection"},"loop on collection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"users = {'Hans': 'active', '\xc9l\xe9onore': 'inactive', '\u666f\u592a\u90ce': 'active'}\n\nfor key, value in users.copy().items():\n    # do something\n")),(0,r.kt)(u,{type:"caution",title:"caution",mdxType:"Admonition"},(0,r.kt)("p",null,"Modifying and iterating same collection should be avoided. You can work with a copy of them. eg. ",(0,r.kt)("inlineCode",{parentName:"p"},"<collection>.copy()")," ")),(0,r.kt)(u,{type:"info",title:"info",mdxType:"Admonition"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<collection>.items()")," function return ",(0,r.kt)("inlineCode",{parentName:"p"},"key, value")," iterable")),(0,r.kt)("h3",{id:"break-and-continue"},(0,r.kt)("inlineCode",{parentName:"h3"},"break")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"continue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"for ... :\n  # do something\n  for ... :\n    # do something\n    break\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"break")," statement breaks out of the ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," innermost enclosing ")," ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"for ... :\n  # do something\n  continue\n")),(0,r.kt)("h3",{id:"else-on-loop"},(0,r.kt)("inlineCode",{parentName:"h3"},"else")," on Loop"),(0,r.kt)("p",null,"If the loop ",(0,r.kt)(m,{color:"var(--primary-font-color)",mdxType:"Color"}," finishes without ")," executing the ",(0,r.kt)("inlineCode",{parentName:"p"},"break"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," clause executes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},'for ... :\n  # do something\nelse:\n  print("print if no break")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"i = 0\nwhile i <= 3:\n  print(i)\n  i = i +1 \n  break\nelse:\n  print('print if no break')\n\n# output\n# 0\n")),(0,r.kt)("h2",{id:"pass-statement"},(0,r.kt)("inlineCode",{parentName:"h2"},"pass")," statement"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pass")," act like empty code block"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title= showLineNumbers",title:"",showLineNumbers:!0},"class MyEmptyClass:\n  pass\n\nwhile True:\n  pass\n\ndef initlog(*args):\n  pass \n\nif True:\n  pass\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/controlflow.html"},"https://docs.python.org/3/tutorial/controlflow.html"))))}h.isMDXComponent=!0}}]);